{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ztWTobemR2M_T16mg9ecf7uqBWyQAAsH","timestamp":1717646618977},{"file_id":"1s3sp1oKt4S2yNH0Ya0LNY3-tqTpt0ZJI","timestamp":1717605005084}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Ver 1.0\n","\n","バージョンについて：配布時点で1.0。修正がある場合バージョンも修正します。自分のバックアップと比較の際に参考にしてください。"],"metadata":{"id":"sorFGO_ISkrX"}},{"cell_type":"markdown","source":["[前回の演習問題の答え](https://colab.research.google.com/drive/1GQR8lzHYeLj2hWCeMPRxYeoS-wPYERwm?usp=sharing)"],"metadata":{"id":"kqKFQo-F8AHa"}},{"cell_type":"markdown","source":["#8. <font color='crimson'>分類問題(ロジスティクス）</font>\n","\n","**今日のポイント**：\n","\n","- ロジスティクス回帰を用いた実践\n","\n","- 分類問題におけるモデル評価\n","\n","\n"],"metadata":{"id":"I7eyvF2v1ICU"}},{"cell_type":"markdown","source":["## 8.1 <font color='crimson'>尤度と最尤推定</font>"],"metadata":{"id":"kASMSyMwIqmV"}},{"cell_type":"markdown","source":["　ここでは推定法について紹介します。線形回帰では、**最小二乗法**を使いましたが、ロジスティック回帰には使うことができません。代わりに使われる方法が、**最尤推定法**になります。両者は次の違いがあります。\n","\n","\n","- **<font color='crimson'>最小二乗法</font>**：観測値とモデルの差の二乗和を最小化する\n","- **<font color='crimson'>最尤法</font>**：モデルの尤度を最大化する\n","\n","わかりずらいので、例で説明します。表が出る確率が0.2であるコインを100回投げてみましょう。\n","\n"],"metadata":{"id":"SHNK9JZPNdX0"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","np.random.seed(1) #seedを決める\n","data = np.random.binomial(1, 0.2, 100) #一回投げるコイン実験を100セット\n","plt.hist(data) #ヒストグラムで実験結果を可視化\n","plt.show() #100回の試行で1が19回、0が81回出たことを示しています。"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"YzUSJuGqF1yL","executionInfo":{"status":"ok","timestamp":1717718120043,"user_tz":-540,"elapsed":488,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"52767fa8-7d88-404f-ca35-94c065089c3a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data.sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jaRolnYwgR-2","executionInfo":{"status":"ok","timestamp":1717718126329,"user_tz":-540,"elapsed":457,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"4205b854-da8f-42e4-8c15-c017cd91c8f4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["19"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["- **尤度**\n","\n","**尤度**とは仮定したモデルで観測値(k=19)が発生する確率のことです。仮にこのコインを公平(表になる確率は0.5)と仮定しましょう。式(3.5)に$N=100$, $X=19$, $p=0.5$を代入したものが$p=0.5$における尤度となります。\n","<br><br>\n","$$\n","P(X=19|p=0.5)={ }_{100} C_{19}0.5^{19}(1-0.5)^{(100-19)}\n","$$\n","<br>\n","となります。\n"],"metadata":{"id":"rw2NKMlAHd47"}},{"cell_type":"markdown","source":["### <font color='crimson'>**[実践1]尤度関数の作成** (15分)</font>\n","\n","プログラミングで上記の式に従い尤度関数を作ってみてください。\n","\n","また、`p=0.5`の場合、上での実験結果`data`における尤度を計算してみてください。\n","\n","<details>\n","\n","<summary> ヒント1 </summary>\n","\n","- 上記の式通り、尤度関数は入力として実験数N, 表になった回数X, および表になる確率pを必要とします。\n","\n","</details>\n","\n","<details>\n","\n","<summary> ヒント2 </summary>\n","\n","- 出力は上記の式での左辺になります。\n","\n","</details>\n","\n","<details>\n","\n","<summary> ヒント3 </summary>\n","\n","```python\n","def likelihood(N, X, p):\n","  y = 右辺の計算\n","  return y\n","```\n","\n","</details>"],"metadata":{"id":"qP5GsVuHTaDe"}},{"cell_type":"code","source":["# 1. 組み合わせの計算関数を作ります。\n","import numpy as np\n","import math\n","\n","def C(N, k):\n","  #階乗はnp.math.factorial()で計算できます\n","  return math.factorial(N) / ( math.factorial(k) * math.factorial(N-k)  )\n","'''\n","例：上記の式の\n","100C19\n","はC(100,19)で計算できます。\n","\n","'''\n","\n","# 2.上記の式により尤度関数を作ります。\n","def likelihood(N, k, p):\n","  # ここから\n","  pass\n","  y = C(N,k)*(np.power(p,k))*(np.power(1-p,N-k))\n","  return y\n","\n","\n"],"metadata":{"id":"GDd13DnpjttW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["likelihood(100, 19, 0.5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E2Kd6so7j0wi","executionInfo":{"status":"ok","timestamp":1717718921299,"user_tz":-540,"elapsed":7,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"d0e84026-b07e-4f24-96ef-451733279ad7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0439909302719954e-10"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["★チャレンジ★\n","\n","- **最尤法および最尤推定量**\n","\n","　続いて、$p=0.1, ...,0.99$の範囲での尤度を各自計算し、可視化してみましょう。"],"metadata":{"id":"DLyQIScmExA9"}},{"cell_type":"code","source":["np.array([1,2,3]) * 3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zZzAbCp-kPvH","executionInfo":{"status":"ok","timestamp":1717718925272,"user_tz":-540,"elapsed":446,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"b64e392e-5120-49aa-ff39-5416f66be471"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 6, 9])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["ps = np.linspace(0.1, 0.99 , 100) #0.1から0.99を100等分に分割≠乱数生成\n","#ps = np.arrange(0.1,1,100)\n","\n","lis = [] #保存用リスト\n","for i in ps:\n","   lis.append(likelihood(100, 19, i))\n","\n","np.max(lis) #lisの中で最大\n","np.argmax(lis) #lisの中で最大の場所"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SNjdri6-ClSQ","executionInfo":{"status":"ok","timestamp":1717719551007,"user_tz":-540,"elapsed":657,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"20559f34-3398-4777-c9c6-f2d7680a6da2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["99"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["plt.plot(ps, lis)\n","plt.xlabel('p')\n","plt.ylabel('likelihood')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"liqJ6_aOksKB","executionInfo":{"status":"ok","timestamp":1717719366419,"user_tz":-540,"elapsed":594,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"a54eeccf-621c-42f8-e9fa-ea69d234463a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["np.argsort(lis)[::-1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jConOy8TlCX5","executionInfo":{"status":"ok","timestamp":1717719369998,"user_tz":-540,"elapsed":5,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"efd69001-0ad3-47ab-b690-b0b592f0ad77"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([10,  9, 11,  8, 12, 13,  7, 14,  6, 15,  5, 16,  4, 17, 18,  3, 19,\n","        2, 20, 21,  1, 22, 23,  0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n","       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n","       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n","       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n","       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["print(ps[10],\"\",ps[99])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ehtqYS1elRVw","executionInfo":{"status":"ok","timestamp":1717719738006,"user_tz":-540,"elapsed":436,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"e84d7d59-c23f-4444-ad7c-c48fa0296384"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.1898989898989899  0.99\n"]}]},{"cell_type":"markdown","source":["　この結果から、$0.1$から$0.99$までの範囲で評価した尤度を見ると、$p=0.19$の時に尤度が最大化しています。これは、コインの表になる確率が$0.19$のとき、実験結果(100回中19回が表)が起こる確率(尤度)が高いことを意味します。このように尤度を最大化する推定方法を**最尤法**とよび、最尤法による推定量を最尤推定量とよびます。ロジスティック回帰分析では、説明変数の係数を最小二乗法ではなく、最尤法で推定しています。\n","\n","ここでは、最尤推定量を数値計算でもとめましたが、尤度関数を微分して最尤推定量を極値（微分が0となる点）として理論計算で求められることもあります。\n"],"metadata":{"id":"eAB0NAipEyA8"}},{"cell_type":"markdown","source":["## 8.2 <font color=\"Crimson\">ロジスティック回帰 (logistic regression)</font>\n","\n","今までのの講義で、売上を目的変数とする回帰モデル\n","<br><br>\n","$$\n","売上=\\beta_0+\\beta_1気温+\\beta_2天気+誤差\n","$$<br>\n","を扱いました。\n","回帰モデルでは、目的変数である売上は実数値であり、「完売する」あるいは「完売しない」のような二値変数を予測することはできません。回帰モデルを二値分類に拡張する方法の一つとして、ロジスティック回帰分析があります。$y$を完売する($y=1$)か、しない($y=0$)かを表す二値変数として、ロジスティック回帰モデルは次式で表されます。\n","<br><br>\n","$$\n","P(y=1)=G(\\beta_0+\\beta_1気温+\\beta_2天気)\n","$$\n","<br>\n","ここで、左辺は$y=1$(完売する)確率を表します。$G$は0と1の間の実数へ写す関数で、\n","次式で定義されます。\n","<br><br>\n","$$\n","G(x)=\\frac{1}{1+e^{-x}}\n","$$\n","<br>\n","左辺が確率であることから、右辺で0と1の間の実数に写す関数を使うことがロジスティック回帰分析の特長です。機械学習ではシグモイド関数(Sigmoid functoin)と呼ばれ、今後の講義でもよく使われます。なお、左辺は確率であって二値変数そのものではないことに注意してください。例えば、 $P(y=1)=0.9$は、90%の確率で目的変数が1になり、10%の確率で目的変数が0になります。\n","\n","その前に$G(x)$をPythonでグラフ化してシグモイド関数の形を確認しておきましょう。"],"metadata":{"id":"66Qa1T6E_ZfQ"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","def logistic(x):\n","  return 1/(1 + np.exp(-x) )\n","\n","x = np.arange(-10, 10, 1) # -5 から-5に\n","y = logistic(x)\n","\n","plt.plot(x,y)\n","plt.xlabel('x')\n","plt.ylabel('p')\n","plt.title('(-10,10)', fontsize=15)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":474},"id":"6B_CGu-8Jxdt","executionInfo":{"status":"ok","timestamp":1717719746167,"user_tz":-540,"elapsed":662,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"e41258e6-c85d-4572-ca9e-fd56e2bb01a1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["　次に、アイスクリームが「完売する」「完売しない」の二値を目的変数とするシミュレーションデータを作ります。ベルヌーイ分布や二項分布を使ってロジスティック回帰モデルからシミュレーションで二値データを発生させます。"],"metadata":{"id":"ztMimY3vvoFe"}},{"cell_type":"code","source":["# シミュレーションデータ生成関数\n","# まずこのコードを実行してください。\n","import numpy as np\n","import pandas as pd\n","\n","def ice_simulator_classfier(base=-0.5, summer_coef=2, rain_coef=-1.3, holiday_coef= 0.5, day =100, seed= 0):\n","  # p = summer_coef * 夏ダミー + rain_coef * 雨ダミー +ノイズ ~ N(0, 1)\n","  # Y = logistic(p)\n","  np.random.seed(seed) #seedの固定\n","\n","  summer = np.random.binomial(1, 0.5, day) #summer persent\n","  rain = np.random.binomial(1, 0.3, day)\n","  holiday = np.random.binomial(1, 0.1, day)\n","  #base = 切片項\n","\n","  prob = logistic (  base + summer_coef * summer + rain_coef * rain +\n","                    holiday * holiday_coef + np.random.normal(0,0.1, day) )\n","  #prob = (0.9,0.2,0.3...)\n","\n","  soldout = np.array([np.random.binomial(1,p) for p in prob])\n","  #それぞれの日で、probの確率でsoldoutする\n","\n","  df = pd.DataFrame(np.vstack([summer, rain, holiday, soldout]).T,columns = ['夏','雨','祝日','完売'] )\n","  #np.vstack([A,B,C]).T  =  ベクトルをくっつけて転置\n","\n","  return df\n","\n","# Logistic\n","def logistic(x):\n","  return 1/(1 + np.exp(-x) )\n","\n","df = ice_simulator_classfier(day=100000)\n","display(df.head(20))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"id":"R80vhrd-mu2W","executionInfo":{"status":"ok","timestamp":1717720189143,"user_tz":-540,"elapsed":622,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"3f378726-fae4-49d1-dffc-b48fda59c3c1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["    夏  雨  祝日  完売\n","0   1  0   0   0\n","1   1  1   0   1\n","2   1  0   1   1\n","3   1  0   1   0\n","4   0  0   0   0\n","5   1  1   0   1\n","6   0  0   0   0\n","7   1  0   0   1\n","8   1  0   0   1\n","9   0  1   0   0\n","10  1  1   0   1\n","11  1  1   0   1\n","12  1  1   0   1\n","13  1  0   0   0\n","14  0  0   0   0\n","15  0  0   0   0\n","16  0  0   0   1\n","17  1  0   0   1\n","18  1  0   0   1\n","19  1  1   0   1"],"text/html":["\n","  <div id=\"df-8859c337-00b9-4e9e-b3bd-5e9f7a212cfe\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>夏</th>\n","      <th>雨</th>\n","      <th>祝日</th>\n","      <th>完売</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8859c337-00b9-4e9e-b3bd-5e9f7a212cfe')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8859c337-00b9-4e9e-b3bd-5e9f7a212cfe button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8859c337-00b9-4e9e-b3bd-5e9f7a212cfe');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-aaf64eaf-5b89-428b-b8ed-21cb6994d595\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aaf64eaf-5b89-428b-b8ed-21cb6994d595')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-aaf64eaf-5b89-428b-b8ed-21cb6994d595 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(df\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"\\u590f\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u96e8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u795d\\u65e5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b8c\\u58f2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["まずは訓練、テストデータに分けます。"],"metadata":{"id":"oAZqnuEV7vtQ"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","target = '完売'\n","X = df.drop(target, axis=1) # targetのみ抜く\n","y = df[target] # targetのみ指定\n","\n","#訓練データ、テストデータにわける\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"],"metadata":{"id":"gnb11zciMdw1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### <font color='crimson'> **ロジスティクス回帰**</font>"],"metadata":{"id":"kYjPHsk32bPj"}},{"cell_type":"code","source":["import statsmodels.api as sm # モジュールの読み込み\n","from statsmodels.discrete.discrete_model import Logit\n","\n","model = Logit(y_train, sm.add_constant(X_train))\n","result = model.fit()\n","print(result.summary())\n","#data数が大＝coefが小...現実に即していく"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kOimoXOnOsWR","executionInfo":{"status":"ok","timestamp":1717720195767,"user_tz":-540,"elapsed":6,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"13d3fea8-71c2-40eb-d86e-ac6c51c1040d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 0.563737\n","         Iterations 5\n","                           Logit Regression Results                           \n","==============================================================================\n","Dep. Variable:                     完売   No. Observations:                80000\n","Model:                          Logit   Df Residuals:                    79996\n","Method:                           MLE   Df Model:                            3\n","Date:                Fri, 07 Jun 2024   Pseudo R-squ.:                  0.1844\n","Time:                        00:29:54   Log-Likelihood:                -45099.\n","converged:                       True   LL-Null:                       -55298.\n","Covariance Type:            nonrobust   LLR p-value:                     0.000\n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const         -0.4839      0.012    -40.468      0.000      -0.507      -0.460\n","夏              1.9685      0.017    116.919      0.000       1.935       2.001\n","雨             -1.2967      0.018    -70.621      0.000      -1.333      -1.261\n","祝日             0.4827      0.028     17.532      0.000       0.429       0.537\n","==============================================================================\n"]}]},{"cell_type":"markdown","source":["- **予測**\n","\n","回帰同様、`result.predict()`で予測も可能です。\n","\n","注意点として、`statsmodels`におけるロジスティクス回帰での予測は、`1`、`0`ではなく、確率が出力されます。"],"metadata":{"id":"b5J_Kmv8qGRn"}},{"cell_type":"code","source":["pred = result.predict(sm.add_constant(X_test))\n","print(pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LIXSg7C6TzAZ","executionInfo":{"status":"ok","timestamp":1717720282852,"user_tz":-540,"elapsed":603,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"ae57211f-60f1-49ac-a5db-8857432cdacd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3582     0.144234\n","60498    0.815270\n","53227    0.815270\n","21333    0.144234\n","3885     0.661635\n","           ...   \n","60116    0.499704\n","2415     0.499704\n","43763    0.815270\n","71345    0.144234\n","77687    0.381342\n","Length: 20000, dtype: float64\n"]}]},{"cell_type":"markdown","source":["これを判別に使うために、一般的に、この確率が0.5以上の場合,`1`と判断し、それ以外は`0`と判断するようにします。\n","\n","ここで四捨五入ができる`np.round()`が非常に便利です。"],"metadata":{"id":"z7bWOs3-tAe1"}},{"cell_type":"code","source":["a = 0.6861213\n","\n","np.round(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bFTdtcJzonTF","executionInfo":{"status":"ok","timestamp":1717720310965,"user_tz":-540,"elapsed":556,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"2a7eeba6-5663-44e0-f076-12d62ae5a79c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["# np.round <- 四捨五入、小数点の桁数をコントロールする時も使えます -> np.round(0.0005, 2)\n","# astypeはpandasデータフレームで、データの型変換に使えます。ここでは実数を整数に直します。\n","pred2 = np.round(pred)#.astype(int)\n","pred2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q537pY8mrtuk","executionInfo":{"status":"ok","timestamp":1717720313768,"user_tz":-540,"elapsed":584,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"891e4258-fb9f-433f-a56a-93be4fbd854b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3582     0.0\n","60498    1.0\n","53227    1.0\n","21333    0.0\n","3885     1.0\n","        ... \n","60116    0.0\n","2415     0.0\n","43763    1.0\n","71345    0.0\n","77687    0.0\n","Length: 20000, dtype: float64"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["compare = pd.concat([y_test, pred2],axis=1)\n","compare.columns = ['正解','予測']\n","compare"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"BhJ4bLydtjo4","executionInfo":{"status":"ok","timestamp":1717720334372,"user_tz":-540,"elapsed":510,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"911f248f-fb8e-4c5c-dfe4-47b8227c8e3e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       正解   予測\n","3582    0  0.0\n","60498   1  1.0\n","53227   1  1.0\n","21333   0  0.0\n","3885    1  1.0\n","...    ..  ...\n","60116   0  0.0\n","2415    1  0.0\n","43763   1  1.0\n","71345   0  0.0\n","77687   1  0.0\n","\n","[20000 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-808cacda-f46e-4e26-a9a1-2188fd5cffc3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>正解</th>\n","      <th>予測</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3582</th>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>60498</th>\n","      <td>1</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>53227</th>\n","      <td>1</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>21333</th>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3885</th>\n","      <td>1</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>60116</th>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2415</th>\n","      <td>1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>43763</th>\n","      <td>1</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>71345</th>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>77687</th>\n","      <td>1</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>20000 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-808cacda-f46e-4e26-a9a1-2188fd5cffc3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-808cacda-f46e-4e26-a9a1-2188fd5cffc3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-808cacda-f46e-4e26-a9a1-2188fd5cffc3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f5f2c116-86fd-4131-a5d1-51026a3f1967\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f5f2c116-86fd-4131-a5d1-51026a3f1967')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f5f2c116-86fd-4131-a5d1-51026a3f1967 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"compare","summary":"{\n  \"name\": \"compare\",\n  \"rows\": 20000,\n  \"fields\": [\n    {\n      \"column\": \"\\u6b63\\u89e3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4e88\\u6e2c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5000088903654836,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":56}]},{"cell_type":"markdown","source":["### <font color='crimson'> **正則項付きロジスティクス回帰**</font>\n","\n","線形回帰同様、ロジスティクス回帰もL1、L2正則項付きでの推定を行うことが可能です。\n","\n","[オフィシャルサイト](https://www.statsmodels.org/stable/generated/statsmodels.discrete.discrete_model.Logit.fit_regularized.html#statsmodels.discrete.discrete_model.Logit.fit_regularized)を見ると、コントロール可能な引数は線形回帰より多く複雑ですが、基本`alpha`だけ調整すれば問題なく使えます。"],"metadata":{"id":"CzLaFVm62luL"}},{"cell_type":"code","source":["# ここは同じ\n","model2 = Logit(y_train, sm.add_constant(X_train))\n","# model.fitのかわりに\n","result2 = model2.fit_regularized(alpha=50)\n","\n","print(result2.summary())\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-UWNc1w22lUr","executionInfo":{"status":"ok","timestamp":1717720642626,"user_tz":-540,"elapsed":749,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"edbbb387-6ad2-4aaf-9b56-be8b157f499f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully    (Exit mode 0)\n","            Current function value: 0.5663501117630659\n","            Iterations: 33\n","            Function evaluations: 33\n","            Gradient evaluations: 33\n","                           Logit Regression Results                           \n","==============================================================================\n","Dep. Variable:                     完売   No. Observations:                80000\n","Model:                          Logit   Df Residuals:                    79996\n","Method:                           MLE   Df Model:                            3\n","Date:                Fri, 07 Jun 2024   Pseudo R-squ.:                  0.1844\n","Time:                        00:37:21   Log-Likelihood:                -45101.\n","converged:                       True   LL-Null:                       -55298.\n","Covariance Type:            nonrobust   LLR p-value:                     0.000\n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const         -0.4703      0.012    -39.423      0.000      -0.494      -0.447\n","夏              1.9437      0.017    115.975      0.000       1.911       1.977\n","雨             -1.2786      0.018    -69.957      0.000      -1.314      -1.243\n","祝日             0.4390      0.027     16.026      0.000       0.385       0.493\n","==============================================================================\n"]}]},{"cell_type":"markdown","source":["- 偏回帰係数の出力"],"metadata":{"id":"_qMOH3aZ4Wug"}},{"cell_type":"code","source":["result2.params"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eBT1XX3N4NaZ","executionInfo":{"status":"ok","timestamp":1717720646877,"user_tz":-540,"elapsed":589,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"08ae9936-301f-49b4-e8ac-9c55c410644d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["const   -0.470251\n","夏        1.943664\n","雨       -1.278589\n","祝日       0.439043\n","dtype: float64"]},"metadata":{},"execution_count":59}]},{"cell_type":"markdown","source":["## 8.3 <font color=\"crimson\">分類モデル評価</font>\n","\n","\n","　分類問題において、問題を考えてみます。顧客が商品を購買するか否かを判別する分類器が図のように二つあるとします。\n","\n","<div align=\"center\">\n","\n","<img src=\"https://drive.google.com/uc?export=view&id=1QfqDxvr0YRQzsTjO2bMp8lxwWJj3WCgY\" width=\"40%\">\n","\n","**どちらが有能な分類器？**\n","</div>\n","\n","　答えを考えながら、分類問題の評価法を学びます。\n","\n","<br><br>\n","#### <font color=\"crimson\">混同行列(Confusion Matrix)</font>\n","　**混同行列**について解説します。分類問題では、予測に「あたる」か「外れる」がありますが、図のようにさらに細かく分類することができます。\n","\n","<div align=\"center\">\n","\n","<img src=\"https://drive.google.com/uc?export=view&id=1QdSAeMDRlFs5f_JCp9tIafMP3FCu4Qta\" width=\"60%\">\n","\n","**混同行列**\n","</div>\n","\n","- **True Positive(TP)**: 実際に完売したケースを完売すると予測する\n","\n","- **True Negative(TN)**: 実際に完売していないケースを完売しないと予測する\n","\n","- **False Positive(FP)**: 実際に完売していないのに完売したと予測する\n","\n","- **False Negative(FN)**: 実際に完売しているのに完売してないと予測する\n","\n","　この行列を**混同行列**と呼び、対角要素(**TP**および**TN**)が正しい分類で、それ以外(**FP**および**FN**)が誤った分類になります。予測の「あたり(TP, TN)」、「はずれ(FP, FN)」にそれぞれ2種類あります。\n","\n","- **正解率(Accuracy)**\n","\n","　一般的に言う**正解率(Accuracy)**とは\n","<br><br>\n","$$\n","Accuracy = \\frac{TP+TN}{TP+TN+FP+FN} \\tag{3.10}\n","$$\n","<br>\n","で定義されます。\n","\n","> 分類器の評価はテストデータの正解率で十分か？\n","\n","　ここで、このセクションの最初に示した問題について考えます。一見、テストデータでの正解率が99%の分類器が80%の分類器より遥かに有能に思えますが、次のようなケースを考えてます。もし、訓練、テストデータともに、100日で、1日のみ完売の記録があるとします。このケースでは、単純に「すべての日で完売しない」と判別するだけで、99%の正解率を持つ分類器になります。ですが、結局完売する日を一日も予測しないので、実際には全く役に立たない分類器になります。逆に、80%正解率の分類器であっても、完売の日を正確に判別していれば、ある程度のハズレ(Fase Positive)があっても、企業にとっては役に立つ分類器だと言えます。\n","\n","　類似のケースとして、「ネット広告のクリック予測」、「稀な持病の予測」など、目的変数の分布が圧倒的に少数で、予測が「あたる(TP)」場合のメリットが「はずれる(FP)」場合のデメリットを大きく上回るケースがあります。このようなケースでは、「正解率」で分類器の性能を評価することは合理的ではありません。\n","\n","　解決策として、他の評価指標も色々提案されていますが、この講義では、**精度(Precision)**、**再現率(Recall)**、**F1スコア(F1 score)**を紹介します。\n","<br><br>\n","- **精度(Precision)**\n","　精度は次式で定義されます。\n","<br><br>\n","$$\n","Precision = \\frac{TP}{TP+FP} \\tag{3.11}\n","$$\n","<br>\n","　精度は、**TP**と**FP**のみに注目しており、「あたり」と予測したサンプル中の実際の「あたり」の比率になっています。精度は、分類器の指標としては比較的**保守的**な指標となります。\n","\n","- **再現率(Recall)**\n","\n","　再現率は次式で定義されます。\n","<br><br>\n","$$\n","Recall = \\frac{TP}{TP+FN} \\tag{3.12}\n","$$\n","<br>\n","　精度とは違い、再現率は真の「あたり」を「あたり」と分類した比率に注目する指標であり、ある程度の「ハズレ」を許容して、「あたり」を逃したくないときに有効なこの指標です。\n","\n","- **F1スコア(F1 score)**\n","\n","　F1スコアは次式で定義されます。\n","<br><br>\n","$$\n","F1 = 2 * \\frac{Precision * Recall}{Precision + Recall} \\tag{3.13}\n","$$\n","<br>\n","　F1スコアは精度と再現率の**調和平均**で構成する指標です。特徴として、精度もしくは再現率が0に近いと、ほぼ0に評価されます。\n","\n","　以上複数の指標を紹介しましたが、絶対的な指標はありません。分析目的に応じて適切な評価指標を選択することが重要となります。\n","\n","　混同行列および以上の指標は**scikit-learn**で簡単に使えます。"],"metadata":{"id":"zgERo5onwu86"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import confusion_matrix, precision_score, recall_score, accuracy_score, f1_score\n","\n","print(\"========ロジスティクス=========\")\n","\n","pred = result.predict(sm.add_constant(X_test))\n","#print(pred)\n","pred2 = np.round(pred).astype(int)\n","#print(pred2)\n","print('混同行列:')\n","print(confusion_matrix(y_test, pred2))\n","accuracy = accuracy_score(y_test, pred2)\n","precision = precision_score(y_test, pred2)\n","recall = recall_score(y_test, pred2)\n","f1 = f1_score(y_test, pred2)\n","\n","print(\"正解率: %.3f\" % accuracy)\n","print(\"精度: %.3f\" % precision)\n","print(\"再現率: %.3f\" % recall)\n","print(\"F1スコア: %.3f\" % f1)\n","\n","print(\"========L1正則付きロジスティクス=========\")\n","\n","pred = result2.predict(sm.add_constant(X_test))\n","pred2 = np.round(pred).astype(int)\n","#print(pred2)\n","print('混同行列:')\n","print(confusion_matrix(y_test, pred2))\n","accuracy = accuracy_score(y_test, pred2)\n","precision = precision_score(y_test, pred2)\n","recall = recall_score(y_test, pred2)\n","f1 = f1_score(y_test, pred2)\n","\n","print(\"正解率: %.3f\" % accuracy)\n","print(\"精度: %.3f\" % precision)\n","print(\"再現率: %.3f\" % recall)\n","print(\"F1スコア: %.3f\" % f1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rx1wVAh4eypJ","executionInfo":{"status":"ok","timestamp":1686876899505,"user_tz":-540,"elapsed":3,"user":{"displayName":"銀河","userId":"16450448122595155493"}},"outputId":"f77ddb6f-9ac3-48e7-aabe-0a47fcf5d31c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["========ロジスティクス=========\n","混同行列:\n","[[73 26]\n"," [29 72]]\n","正解率: 0.725\n","精度: 0.735\n","再現率: 0.713\n","F1スコア: 0.724\n","========L1正則付きロジスティクス=========\n","混同行列:\n","[[76 23]\n"," [33 68]]\n","正解率: 0.720\n","精度: 0.747\n","再現率: 0.673\n","F1スコア: 0.708\n"]}]},{"cell_type":"markdown","source":["## <font color='crimson'>**[実践2]ロジスティクス回帰実践** (残り時間)</font>\n","\n","下記のデータを使い、ロジスティクス回帰を実行してみてください。\n","\n","1. Clicked_ADを従属変数に指定します。\n","\n","1. 説明変数（X)の標準化を行います。\n","\n","1. 全データの20%をテストデータとして残します。\n","\n","1. クリックに影響力が高い3つの変数をプリントしてください。\n","\n","1. 混同行列、正解率とf1スコアでモデル評価をおこなってください。"],"metadata":{"id":"XmPs2yQG6D4p"}},{"cell_type":"code","source":["# Simulation data\n","import pandas as pd\n","df = pd.read_csv('https://raw.githubusercontent.com/dgod1028/Research/main/data/AD_simu.csv')\n","display(df.head())\n","print(len(df))#データ数"],"metadata":{"id":"_vDeR4Mzx1PX","executionInfo":{"status":"ok","timestamp":1732672284095,"user_tz":-540,"elapsed":234,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"colab":{"base_uri":"https://localhost:8080/","height":224},"outputId":"51bd2f09-c233-4751-c70b-87b490d3b2bb"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["   age  Male  Use_PC  Married  Family_Num  Clicked_AD\n","0   25     1       0        0           4           0\n","1   31     1       0        0           2           0\n","2   32     0       0        0           2           0\n","3   28     1       0        0           2           0\n","4   29     1       0        0           1           0"],"text/html":["\n","  <div id=\"df-f1e65a80-0e10-470b-9476-bd6139670320\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>Male</th>\n","      <th>Use_PC</th>\n","      <th>Married</th>\n","      <th>Family_Num</th>\n","      <th>Clicked_AD</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>25</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>31</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>32</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>28</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>29</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1e65a80-0e10-470b-9476-bd6139670320')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f1e65a80-0e10-470b-9476-bd6139670320 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f1e65a80-0e10-470b-9476-bd6139670320');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4915894a-51a7-45bc-8330-f1abcc7dc303\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4915894a-51a7-45bc-8330-f1abcc7dc303')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4915894a-51a7-45bc-8330-f1abcc7dc303 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"print(len(df))\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 25,\n        \"max\": 32,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          31,\n          29,\n          32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Use_PC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Family_Num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Clicked_AD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["10000\n"]}]},{"cell_type":"code","source":["# ここから\n","\n","\n","# 1 X, yの作成\n","target = 'Clicked_AD'\n","y = df[target]\n","X = df.drop(target,axis = 1)\n","\n","# 2 データ標準化 (第6回からコピペ)\n","from sklearn.preprocessing import StandardScaler\n","\n","norm = StandardScaler() # 標準化関数の定義\n","X[X.columns] = norm.fit_transform(X) # 標準化を行います。\n","\n","# 3 80%訓練, 20%テスト\n","from sklearn.model_selection import train_test_split\n","\n","X_train, X_test ,y_train , y_test = train_test_split(X,y, test_size=0.2, random_state=0)\n","\n","# 4 影響力が高い順 TOP3\n","import statsmodels.api as sm\n","from statsmodels.discrete.discrete_model import Logit\n","\n","model = Logit(y_train, sm.add_constant(X_train))\n","result = model.fit()\n","print(result.summary())\n","\n","import numpy as np\n","coef = np.array(result.params) #model.summaryから係数の値だけを抜き取る\n","# 絶対値でインデックス降順\n","from math import fabs\n","coef_fab = [abs(i) for i in coef]\n","name = np.array(X.columns)\n","i = name[np.argsort(np.delete(coef_fab,0,0))[::-1]] #[::-1]...高い順\n","print(i[:3]) #Top3\n","\n","# 5\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import confusion_matrix, precision_score, recall_score, accuracy_score, f1_score\n","\n","pred = result.predict(sm.add_constant(X_test))\n","#print(pred)\n","pred2 = np.round(pred).astype(int)\n","#print(pred2)\n","print('混同行列:')\n","print(confusion_matrix(y_test, pred2))\n","accuracy = accuracy_score(y_test, pred2)\n","precision = precision_score(y_test, pred2)\n","recall = recall_score(y_test, pred2)\n","f1 = f1_score(y_test, pred2)\n","\n","print(\"正解率: %.3f\" % accuracy)\n","print(\"精度: %.3f\" % precision)\n","print(\"再現率: %.3f\" % recall)\n","print(\"F1スコア: %.3f\" % f1)"],"metadata":{"id":"7n6lrOVR7iS_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732672061732,"user_tz":-540,"elapsed":18019,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"ad71505a-eb05-49b5-fac2-4b9708b1afdb"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 0.096108\n","         Iterations 11\n","                           Logit Regression Results                           \n","==============================================================================\n","Dep. Variable:             Clicked_AD   No. Observations:                 8000\n","Model:                          Logit   Df Residuals:                     7994\n","Method:                           MLE   Df Model:                            5\n","Date:                Wed, 27 Nov 2024   Pseudo R-squ.:                  0.4277\n","Time:                        01:47:38   Log-Likelihood:                -768.87\n","converged:                       True   LL-Null:                       -1343.6\n","Covariance Type:            nonrobust   LLR p-value:                2.714e-246\n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const         -6.8935      0.302    -22.838      0.000      -7.485      -6.302\n","age           -0.4344      0.069     -6.269      0.000      -0.570      -0.299\n","Male           0.1921      0.071      2.706      0.007       0.053       0.331\n","Use_PC        -0.6823      0.132     -5.178      0.000      -0.941      -0.424\n","Married        0.9065      0.056     16.226      0.000       0.797       1.016\n","Family_Num    -3.4553      0.218    -15.877      0.000      -3.882      -3.029\n","==============================================================================\n","\n","Possibly complete quasi-separation: A fraction 0.33 of observations can be\n","perfectly predicted. This might indicate that there is complete\n","quasi-separation. In this case some parameters will not be identified.\n","['Family_Num' 'Married' 'Use_PC']\n","混同行列:\n","[[1908   14]\n"," [  49   29]]\n","正解率: 0.969\n","精度: 0.674\n","再現率: 0.372\n","F1スコア: 0.479\n"]}]}]}