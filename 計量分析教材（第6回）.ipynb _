{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1iGLP3afgweFK4OaWvvJFjO0bDAcp3URN","timestamp":1715676123209},{"file_id":"1dm7MxYeafLURIUyQXLo21lRH-5xJhdXB","timestamp":1684802603981},{"file_id":"1cVqDN4eOG6LlGXXMVTKhXva3CuVyMP2h","timestamp":1684221241100}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Ver 1.0 課題完了\n","\n","バージョンについて：配布時点で1.0。修正がある場合バージョンも修正します。自分のバックアップと比較の際に参考にしてください。"],"metadata":{"id":"sorFGO_ISkrX"}},{"cell_type":"markdown","source":["#6. <font color='crimson'>データの前処理とモデル評価</font>\n","\n","**今日のポイント**：\n","\n","- データの前処理\n","\n","- モデル評価\n","\n","- 変数選択\n","\n","\n"],"metadata":{"id":"I7eyvF2v1ICU"}},{"cell_type":"markdown","source":["前回では回帰分析を簡単に行いましたが、使ったデータはすでにきれいに整形されていたためです。実際に、データは生ではそのまま回帰分析に使えない場合がほとんどです（文字データが入ったり、欠損値があったり）。回帰分析の前に、いくつかの前処理を通じて、回帰に使えるような数字行列の$X$に整形する必要があります。\n","\n","## 6.1 <font color='crimson'>データの前処理</font>\n","\n","前処理は、データ分析の中でも一番大変の一つです。分析目的によって様々な前処理が考えられますが、本演習では**ダミー処理**、**訓練データ、テストデータの分割**、および**正規化**について紹介します。"],"metadata":{"id":"kASMSyMwIqmV"}},{"cell_type":"markdown","source":["まず、疑似データを作成してみます。"],"metadata":{"id":"TafZ9tRcP9R5"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","np.random.seed(1)\n","# 疑似データを作ります。\n","\n","col0 = np.random.normal(3, 1, 10) # N(3, 1)から\n","col1 = np.random.binomial(1, 0.5, 10) # p(x=0.5)から\n","col2 = np.random.binomial(1, 0.3, 10) # p(x=0.3)から\n","col3 = np.random.randint(0, 4, 10) # 0, 1, 2, 3をランダムに\n","col4 = np.random.randint(0, 3, 10) # 0, 1, 2をランダムに\n","\n","# 文字データに変換\n","col2n = '文系 理系'.split() # ['文系','理系'] と同じ\n","col3n = '東京 仙台 山形 大阪'.split()\n","col4n = '低 中 高'.split()\n","\n","\n","# col2,col3 と col4は文字に変換\n","col2 = [col2n[i] for i in col2] #col2内の変数を上で文字データ化したのちに、ここで一つ一つを文字として抽出\n","col3 = [col3n[i] for i in col3]\n","col4 = [col4n[i] for i in col4]\n","\n","df = pd.DataFrame([col0, col1, col2, col3, col4]).T # 行で結合するため、転置が必要\n","df.columns = ['通学距離', '性別', '進路','実家', '学力'] # 列名指定\n","display(df)"],"metadata":{"id":"7E12HEplQrQN","colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"status":"ok","timestamp":1716903312140,"user_tz":-540,"elapsed":761,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"605f8e74-4523-433f-dd44-0d9640a2abb9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["       通学距離 性別  進路  実家 学力\n","0  4.624345  0  理系  東京  中\n","1  2.388244  1  理系  東京  高\n","2  2.471828  0  文系  仙台  低\n","3  1.927031  1  文系  大阪  低\n","4  3.865408  0  文系  東京  中\n","5  0.698461  0  理系  山形  高\n","6  4.744812  1  文系  東京  高\n","7  2.238793  1  文系  東京  中\n","8  3.319039  0  理系  仙台  低\n","9   2.75063  1  文系  大阪  高"],"text/html":["\n","  <div id=\"df-b5249f18-aaaa-46c6-b901-b41aec1b4554\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路</th>\n","      <th>実家</th>\n","      <th>学力</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.624345</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","      <td>中</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.388244</td>\n","      <td>1</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","      <td>高</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.471828</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>仙台</td>\n","      <td>低</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.927031</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","      <td>低</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.865408</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>中</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.698461</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>山形</td>\n","      <td>高</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.744812</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>高</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.238793</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>中</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.319039</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>仙台</td>\n","      <td>低</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.75063</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","      <td>高</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5249f18-aaaa-46c6-b901-b41aec1b4554')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b5249f18-aaaa-46c6-b901-b41aec1b4554 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b5249f18-aaaa-46c6-b901-b41aec1b4554');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-30688158-12d9-4bfb-835a-3d7010f62f71\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30688158-12d9-4bfb-835a-3d7010f62f71')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-30688158-12d9-4bfb-835a-3d7010f62f71 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.6984613031197173,\n        \"max\": 4.74481176421648,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          3.3190390960570983,\n          2.3882435863499247,\n          0.6984613031197173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\u6587\\u7cfb\",\n          \"\\u7406\\u7cfb\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"\\u4ed9\\u53f0\",\n          \"\\u5c71\\u5f62\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\u4e2d\",\n          \"\\u9ad8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["このデータは文字型なども入った状態で、そのまま回帰で使うことができません。"],"metadata":{"id":"KPSV_yVNVh6I"}},{"cell_type":"markdown","source":["このデータで\n","\n","- <font color='crimson'>**通学距離**</font>: **連続値変量**です。通常は何も処理せずにデータ分析に使えます。\n","\n","- <font color='crimson'>**性別**</font>: この例では二値の**ダミー変数(dummy)**です。この場合通用0と1の性別が何を示しているのかの説明が必要です。こちらも特別処理せずに使えますが、**0, 1である必要があり、 1, 2や2,3などのペアだと0, 1に直す必要があります。**\n","\n","- <font color='crimson'>**進路**</font>: こちらも二値の**ダミー変数**ですが、文字型であるため、このまま使うことはできません、**性別**同様に数値に直す必要があり、例えば理系=0, 文系=1などに直してから使う必要があります。\n","\n","- <font color='crimson'>**実家**</font>: **カテゴリー(categorical)変数**です。こちらは順序データではないため、大阪=0, 山形=1, 東京=2などに変換しただけでは正しく回帰では使えません（ややこしいことに、連続値として使ってもエラーにはなりません。）ので、ダミー変数に変換する必要があります。\n","\n","- <font color='crimson'>**学力**</font>: **カテゴリー(categorical)変数**ですが、順序が付けられるような変数であるので、**実家**変数のようにダミー変数に変換するするか、連続値として低=0, 中=1, 高=2に変換するかは分析によって決めます。"],"metadata":{"id":"nQfZjcopRa-Y"}},{"cell_type":"markdown","source":["### <font color='crimson'>ダミー変数の作成</font>\n","\n","ここで、**実家**変数を例に、カテゴリー変数をダミーに直してみましょう。\n","\n","pandasでは`pd.get_dummies()`で簡単にダミー変数を作成することができます。"],"metadata":{"id":"eze8JD1UXHYx"}},{"cell_type":"code","source":["#ダミー変数=数字ではないデータ(質的データ)を数字(0か1)に変換する手法\n","tmp = df['実家'].copy()\n","print('変換前')\n","display(tmp)\n","print('\\n変換後')\n","tmp2 = pd.get_dummies(tmp) #pd.get_dummies()\n","display(tmp2)\n","print('\\n数字に変換後')\n","tmp2_=pd.get_dummies(tmp,dtype=int)\n","display(tmp2_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":999},"id":"6wIlCNmcWvNp","executionInfo":{"status":"ok","timestamp":1716903317788,"user_tz":-540,"elapsed":616,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"ae6c03f6-4cbb-48c5-d552-e30c0f52de28"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["変換前\n"]},{"output_type":"display_data","data":{"text/plain":["0    東京\n","1    東京\n","2    仙台\n","3    大阪\n","4    東京\n","5    山形\n","6    東京\n","7    東京\n","8    仙台\n","9    大阪\n","Name: 実家, dtype: object"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","変換後\n"]},{"output_type":"display_data","data":{"text/plain":["      仙台     大阪     山形     東京\n","0  False  False  False   True\n","1  False  False  False   True\n","2   True  False  False  False\n","3  False   True  False  False\n","4  False  False  False   True\n","5  False  False   True  False\n","6  False  False  False   True\n","7  False  False  False   True\n","8   True  False  False  False\n","9  False   True  False  False"],"text/html":["\n","  <div id=\"df-81874fc1-916d-4d1c-ae5c-cee303b1417e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>仙台</th>\n","      <th>大阪</th>\n","      <th>山形</th>\n","      <th>東京</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-81874fc1-916d-4d1c-ae5c-cee303b1417e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-81874fc1-916d-4d1c-ae5c-cee303b1417e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-81874fc1-916d-4d1c-ae5c-cee303b1417e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0104d06f-9e8c-4d94-bbeb-5fa90ceebbe7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0104d06f-9e8c-4d94-bbeb-5fa90ceebbe7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0104d06f-9e8c-4d94-bbeb-5fa90ceebbe7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tmp2","summary":"{\n  \"name\": \"tmp2\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u4ed9\\u53f0\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5c71\\u5f62\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","数字に変換後\n"]},{"output_type":"display_data","data":{"text/plain":["   仙台  大阪  山形  東京\n","0   0   0   0   1\n","1   0   0   0   1\n","2   1   0   0   0\n","3   0   1   0   0\n","4   0   0   0   1\n","5   0   0   1   0\n","6   0   0   0   1\n","7   0   0   0   1\n","8   1   0   0   0\n","9   0   1   0   0"],"text/html":["\n","  <div id=\"df-1bd563c8-9719-4787-8bb0-19947de936b9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>仙台</th>\n","      <th>大阪</th>\n","      <th>山形</th>\n","      <th>東京</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1bd563c8-9719-4787-8bb0-19947de936b9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1bd563c8-9719-4787-8bb0-19947de936b9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1bd563c8-9719-4787-8bb0-19947de936b9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c31ca610-66a5-42c1-8ad9-c6d8a9011b34\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c31ca610-66a5-42c1-8ad9-c6d8a9011b34')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c31ca610-66a5-42c1-8ad9-c6d8a9011b34 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tmp2_","summary":"{\n  \"name\": \"tmp2_\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u4ed9\\u53f0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5c71\\u5f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["ちゃんと分割されましたが、講義で学んだように、P個の要素をP個のダミー変数に変換すると**多重共線性**問題が出ます。\n","\n","この例だと、<font color='red'>index 6</font>に着目すると、仙台=0, 大阪=0, 山形=0の時点で、東京=1になることは自明であるので、四つの項目の中、一つを抜く必要があります。その際に、基準となる変数にこだわりがなければ、`pd.get_dummies(data, drop_first=True)`で最初の列を自動で抜きます。"],"metadata":{"id":"_zE9AEopXZ5y"}},{"cell_type":"markdown","source":["- 最初の列を削除"],"metadata":{"id":"PNcGDZWqaoWg"}},{"cell_type":"code","source":["tmp3 = pd.get_dummies(tmp,dtype=int, drop_first=True) #pd.get_dummies(data, drop_first=True)(こだわりなく1項目抜く)\n","display(tmp3)"],"metadata":{"id":"UW7ekfksaTRa","colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"status":"ok","timestamp":1716903321335,"user_tz":-540,"elapsed":380,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"0fa41494-557d-4c66-9c29-6da589d8bdff"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["   大阪  山形  東京\n","0   0   0   1\n","1   0   0   1\n","2   0   0   0\n","3   1   0   0\n","4   0   0   1\n","5   0   1   0\n","6   0   0   1\n","7   0   0   1\n","8   0   0   0\n","9   1   0   0"],"text/html":["\n","  <div id=\"df-eb02d387-3410-4189-bce3-189cd072ed97\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>大阪</th>\n","      <th>山形</th>\n","      <th>東京</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb02d387-3410-4189-bce3-189cd072ed97')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eb02d387-3410-4189-bce3-189cd072ed97 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eb02d387-3410-4189-bce3-189cd072ed97');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3794ca24-8641-474f-b4ef-46e5e73aed45\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3794ca24-8641-474f-b4ef-46e5e73aed45')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3794ca24-8641-474f-b4ef-46e5e73aed45 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tmp3","summary":"{\n  \"name\": \"tmp3\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5c71\\u5f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["- マニュアルで削除\n","\n","もちろん、自分で基準となる変数を設定したい場合、生成した後、前回学んだ`drop`で抜くことも可能です。"],"metadata":{"id":"5dcx9sxqaqj4"}},{"cell_type":"code","source":["def mydummy(data, base):\n","  tmp = pd.get_dummies(data,dtype=int) # ダミー変数に変換\n","  tmp = tmp.drop(base, axis=1) # 指定した列をdrop\n","  return tmp\n","\n","display( mydummy(tmp, '東京') )\n","display( mydummy(tmp, '山形') )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":708},"id":"RsaD-pzDa3Ni","executionInfo":{"status":"ok","timestamp":1716903323522,"user_tz":-540,"elapsed":566,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"77a9f49f-2ea8-4585-9cfe-ec9ef6872e49"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["   仙台  大阪  山形\n","0   0   0   0\n","1   0   0   0\n","2   1   0   0\n","3   0   1   0\n","4   0   0   0\n","5   0   0   1\n","6   0   0   0\n","7   0   0   0\n","8   1   0   0\n","9   0   1   0"],"text/html":["\n","  <div id=\"df-d7a4f35d-9cc2-4a14-af2f-12357fd13954\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>仙台</th>\n","      <th>大阪</th>\n","      <th>山形</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7a4f35d-9cc2-4a14-af2f-12357fd13954')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d7a4f35d-9cc2-4a14-af2f-12357fd13954 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d7a4f35d-9cc2-4a14-af2f-12357fd13954');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-309cbb8c-1bcc-4ddd-bf99-7e9d5ffa6cac\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-309cbb8c-1bcc-4ddd-bf99-7e9d5ffa6cac')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-309cbb8c-1bcc-4ddd-bf99-7e9d5ffa6cac button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display( mydummy(tmp, '\\u5c71\\u5f62') )\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u4ed9\\u53f0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5c71\\u5f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["   仙台  大阪  東京\n","0   0   0   1\n","1   0   0   1\n","2   1   0   0\n","3   0   1   0\n","4   0   0   1\n","5   0   0   0\n","6   0   0   1\n","7   0   0   1\n","8   1   0   0\n","9   0   1   0"],"text/html":["\n","  <div id=\"df-6d5440ba-5ff9-45fe-a5b7-6a149fb72c18\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>仙台</th>\n","      <th>大阪</th>\n","      <th>東京</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d5440ba-5ff9-45fe-a5b7-6a149fb72c18')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6d5440ba-5ff9-45fe-a5b7-6a149fb72c18 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6d5440ba-5ff9-45fe-a5b7-6a149fb72c18');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-54a7422a-ca5a-4747-a617-c5176f0c9ef7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-54a7422a-ca5a-4747-a617-c5176f0c9ef7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-54a7422a-ca5a-4747-a617-c5176f0c9ef7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display( mydummy(tmp, '\\u5c71\\u5f62') )\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u4ed9\\u53f0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["- 複数の項目を変換\n","\n","`pd.get_dummies`では複数の項目を同時に変換できます。"],"metadata":{"id":"PX0zhwRvc2f4"}},{"cell_type":"code","source":["display(df)\n","\n","newdf = pd.get_dummies(df, dtype= int ,columns='進路 実家 学力'.split(), drop_first=True) #pd.get_dummies(引数,dtype,columns.split(),drop_first=True)\n","display(newdf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":708},"id":"3201uT9Wc8ZJ","executionInfo":{"status":"ok","timestamp":1716903325279,"user_tz":-540,"elapsed":10,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"4f731d7f-05c3-4975-c70c-0b3486875013"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["       通学距離 性別  進路  実家 学力\n","0  4.624345  0  理系  東京  中\n","1  2.388244  1  理系  東京  高\n","2  2.471828  0  文系  仙台  低\n","3  1.927031  1  文系  大阪  低\n","4  3.865408  0  文系  東京  中\n","5  0.698461  0  理系  山形  高\n","6  4.744812  1  文系  東京  高\n","7  2.238793  1  文系  東京  中\n","8  3.319039  0  理系  仙台  低\n","9   2.75063  1  文系  大阪  高"],"text/html":["\n","  <div id=\"df-38c11a5f-bc40-42c2-9d37-0bc61b8fc7a9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路</th>\n","      <th>実家</th>\n","      <th>学力</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.624345</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","      <td>中</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.388244</td>\n","      <td>1</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","      <td>高</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.471828</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>仙台</td>\n","      <td>低</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.927031</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","      <td>低</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.865408</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>中</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.698461</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>山形</td>\n","      <td>高</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.744812</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>高</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.238793</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>中</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.319039</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>仙台</td>\n","      <td>低</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.75063</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","      <td>高</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38c11a5f-bc40-42c2-9d37-0bc61b8fc7a9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-38c11a5f-bc40-42c2-9d37-0bc61b8fc7a9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-38c11a5f-bc40-42c2-9d37-0bc61b8fc7a9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-28639e07-237c-40d5-84ba-ba676768083d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-28639e07-237c-40d5-84ba-ba676768083d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-28639e07-237c-40d5-84ba-ba676768083d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.6984613031197173,\n        \"max\": 4.74481176421648,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          3.3190390960570983,\n          2.3882435863499247,\n          0.6984613031197173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\u6587\\u7cfb\",\n          \"\\u7406\\u7cfb\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"\\u4ed9\\u53f0\",\n          \"\\u5c71\\u5f62\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\u4e2d\",\n          \"\\u9ad8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["       通学距離 性別  進路_理系  実家_大阪  実家_山形  実家_東京  学力_低  学力_高\n","0  4.624345  0      1      0      0      1     0     0\n","1  2.388244  1      1      0      0      1     0     1\n","2  2.471828  0      0      0      0      0     1     0\n","3  1.927031  1      0      1      0      0     1     0\n","4  3.865408  0      0      0      0      1     0     0\n","5  0.698461  0      1      0      1      0     0     1\n","6  4.744812  1      0      0      0      1     0     1\n","7  2.238793  1      0      0      0      1     0     0\n","8  3.319039  0      1      0      0      0     1     0\n","9   2.75063  1      0      1      0      0     0     1"],"text/html":["\n","  <div id=\"df-2e2de0b7-5d2b-474f-86e5-babfdaa312f2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路_理系</th>\n","      <th>実家_大阪</th>\n","      <th>実家_山形</th>\n","      <th>実家_東京</th>\n","      <th>学力_低</th>\n","      <th>学力_高</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.624345</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.388244</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.471828</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.927031</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.865408</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.698461</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.744812</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.238793</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.319039</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.75063</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e2de0b7-5d2b-474f-86e5-babfdaa312f2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2e2de0b7-5d2b-474f-86e5-babfdaa312f2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2e2de0b7-5d2b-474f-86e5-babfdaa312f2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-feaee43c-2492-491b-90a7-82e8739a4088\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-feaee43c-2492-491b-90a7-82e8739a4088')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-feaee43c-2492-491b-90a7-82e8739a4088 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"newdf","summary":"{\n  \"name\": \"newdf\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.6984613031197173,\n        \"max\": 4.74481176421648,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          3.3190390960570983,\n          2.3882435863499247,\n          0.6984613031197173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def_\\u7406\\u7cfb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5c71\\u5f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u4f4e\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["複数の項目をマニュアル変換\n","\n","pandasでダミー変数に変えるとき、変数名が<font color='crimson'>元の変数名_要素名</font> (例: 進路_理系)になるので、予め指定することができます。"],"metadata":{"id":"O8Zh-yIGdg2h"}},{"cell_type":"code","source":["drops = ['実家_山形', '学力_高', '進路_文系'] # 各カテゴリー変数から一つ指定する。順番に入力する必要なし。\n","\n","newdf2 = pd.get_dummies(df,dtype=int, columns='進路 実家 学力'.split())\n","newdf2 = newdf2.drop(drops, axis=1)\n","display(newdf2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"7VlDil0VdHV6","executionInfo":{"status":"ok","timestamp":1716903325943,"user_tz":-540,"elapsed":8,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"95ae0f67-de56-427a-84a9-d2a7ae2d84c4"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["       通学距離 性別  進路_理系  実家_仙台  実家_大阪  実家_東京  学力_中  学力_低\n","0  4.624345  0      1      0      0      1     1     0\n","1  2.388244  1      1      0      0      1     0     0\n","2  2.471828  0      0      1      0      0     0     1\n","3  1.927031  1      0      0      1      0     0     1\n","4  3.865408  0      0      0      0      1     1     0\n","5  0.698461  0      1      0      0      0     0     0\n","6  4.744812  1      0      0      0      1     0     0\n","7  2.238793  1      0      0      0      1     1     0\n","8  3.319039  0      1      1      0      0     0     1\n","9   2.75063  1      0      0      1      0     0     0"],"text/html":["\n","  <div id=\"df-1b8f5f6a-2bac-4307-bb0f-0264f1979325\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路_理系</th>\n","      <th>実家_仙台</th>\n","      <th>実家_大阪</th>\n","      <th>実家_東京</th>\n","      <th>学力_中</th>\n","      <th>学力_低</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.624345</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.388244</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.471828</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.927031</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.865408</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.698461</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.744812</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.238793</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.319039</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.75063</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b8f5f6a-2bac-4307-bb0f-0264f1979325')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1b8f5f6a-2bac-4307-bb0f-0264f1979325 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1b8f5f6a-2bac-4307-bb0f-0264f1979325');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2c3f06b9-fd77-4f85-9f39-cc4858c21dcc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c3f06b9-fd77-4f85-9f39-cc4858c21dcc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2c3f06b9-fd77-4f85-9f39-cc4858c21dcc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"newdf2","summary":"{\n  \"name\": \"newdf2\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.6984613031197173,\n        \"max\": 4.74481176421648,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          3.3190390960570983,\n          2.3882435863499247,\n          0.6984613031197173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def_\\u7406\\u7cfb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u4ed9\\u53f0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u4e2d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u4f4e\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["> なぜマニュアル変換が必要か？\n","\n","基準値となる変数を選択したい場合、マニュアルで該当項目を抜く必要があります。\n","\n","例えば、上記の行列を説明変数行列Xとし、ある目的変数yを予測する際に、実家が**東京**と**仙台**の学生で、有意な差は認められるか？ということを判別するためには、**東京**か**仙台**を基準値として使う必要があります。例えば**仙台**を基準値として設定する場合、上記のダミー変換の際に、**実家_仙台**を抜いて、回帰分析を行い、**実家_東京**変数が有意になる場合、**東京**と**仙台**に有意な差が認められることになります。\n","\n","要するに、ダミー変換された項目の中で、基準値と設定したい項目をマニュアルで`drop()`すればいいです。"],"metadata":{"id":"0PAH1ZWXWV2y"}},{"cell_type":"markdown","source":["### <font color='crimson'>**[実践1]カテゴリー変数を連続値に変換** (10 mins)</font>\n","\n","上の例におけるデータフレームのカテゴリー変数をダミー変数に直します。\n","\n","1. **進路**と**実家**はダミー変数に直しますが、**進路**では**理系**、実家では**仙台**を抜いてください（基準値に設定）。\n","\n","1. **学力**変数を連続値に直してみてください。その際に、低=0, 中=1, 高=2にします。\n","\n","\n"],"metadata":{"id":"ERSSe-NKcC6_"}},{"cell_type":"code","source":["import pandas as pd\n","df2 = df.copy()\n","#display(df2)\n","# ここから, df2で操作してください。\n","#1\n","newdf2 = pd.get_dummies(df2, dtype= int ,columns='進路 実家 '.split())\n","drops = ['実家_仙台', '進路_理系']\n","newdf2 = newdf2.drop(drops, axis=1)\n","display(newdf2)\n","#2\n","scores = [] #makeing dataframe\n","\n","for i in df2['学力']:\n","   if i == '低':\n","     score = 0\n","   if i == '中':\n","     score = 1\n","   if i == '高':\n","     score =2\n","   scores.append(score)\n","df2['学力'] = scores\n","df2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":708},"id":"XHYW-fjAcNip","executionInfo":{"status":"ok","timestamp":1716903327930,"user_tz":-540,"elapsed":11,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"b98adccf-a461-4771-bd54-9207baa040ed"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["       通学距離 性別 学力  進路_文系  実家_大阪  実家_山形  実家_東京\n","0  4.624345  0  中      0      0      0      1\n","1  2.388244  1  高      0      0      0      1\n","2  2.471828  0  低      1      0      0      0\n","3  1.927031  1  低      1      1      0      0\n","4  3.865408  0  中      1      0      0      1\n","5  0.698461  0  高      0      0      1      0\n","6  4.744812  1  高      1      0      0      1\n","7  2.238793  1  中      1      0      0      1\n","8  3.319039  0  低      0      0      0      0\n","9   2.75063  1  高      1      1      0      0"],"text/html":["\n","  <div id=\"df-eaa110c5-c999-4c38-9509-3e4565ad5222\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>学力</th>\n","      <th>進路_文系</th>\n","      <th>実家_大阪</th>\n","      <th>実家_山形</th>\n","      <th>実家_東京</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.624345</td>\n","      <td>0</td>\n","      <td>中</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.388244</td>\n","      <td>1</td>\n","      <td>高</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.471828</td>\n","      <td>0</td>\n","      <td>低</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.927031</td>\n","      <td>1</td>\n","      <td>低</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.865408</td>\n","      <td>0</td>\n","      <td>中</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.698461</td>\n","      <td>0</td>\n","      <td>高</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.744812</td>\n","      <td>1</td>\n","      <td>高</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.238793</td>\n","      <td>1</td>\n","      <td>中</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.319039</td>\n","      <td>0</td>\n","      <td>低</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.75063</td>\n","      <td>1</td>\n","      <td>高</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eaa110c5-c999-4c38-9509-3e4565ad5222')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eaa110c5-c999-4c38-9509-3e4565ad5222 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eaa110c5-c999-4c38-9509-3e4565ad5222');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bca13f41-c21a-416b-adb7-53a52fd87e18\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bca13f41-c21a-416b-adb7-53a52fd87e18')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bca13f41-c21a-416b-adb7-53a52fd87e18 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"newdf2","summary":"{\n  \"name\": \"newdf2\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.6984613031197173,\n        \"max\": 4.74481176421648,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          3.3190390960570983,\n          2.3882435863499247,\n          0.6984613031197173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\u4e2d\",\n          \"\\u9ad8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def_\\u6587\\u7cfb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5c71\\u5f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["       通学距離 性別  進路  実家  学力\n","0  4.624345  0  理系  東京   1\n","1  2.388244  1  理系  東京   2\n","2  2.471828  0  文系  仙台   0\n","3  1.927031  1  文系  大阪   0\n","4  3.865408  0  文系  東京   1\n","5  0.698461  0  理系  山形   2\n","6  4.744812  1  文系  東京   2\n","7  2.238793  1  文系  東京   1\n","8  3.319039  0  理系  仙台   0\n","9   2.75063  1  文系  大阪   2"],"text/html":["\n","  <div id=\"df-a0f27185-a2f4-423f-9747-1542cc9411b5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路</th>\n","      <th>実家</th>\n","      <th>学力</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.624345</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.388244</td>\n","      <td>1</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.471828</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>仙台</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.927031</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.865408</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.698461</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>山形</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.744812</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.238793</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.319039</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>仙台</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.75063</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0f27185-a2f4-423f-9747-1542cc9411b5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a0f27185-a2f4-423f-9747-1542cc9411b5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a0f27185-a2f4-423f-9747-1542cc9411b5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-02b205f1-d2f8-445f-9bda-67b5b164e80c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-02b205f1-d2f8-445f-9bda-67b5b164e80c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-02b205f1-d2f8-445f-9bda-67b5b164e80c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df2","summary":"{\n  \"name\": \"df2\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.6984613031197173,\n        \"max\": 4.74481176421648,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          3.3190390960570983,\n          2.3882435863499247,\n          0.6984613031197173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\u6587\\u7cfb\",\n          \"\\u7406\\u7cfb\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"\\u4ed9\\u53f0\",\n          \"\\u5c71\\u5f62\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["#dictionary\n","scores=[]\n","\n","di = {'低':0,'中':1,'高':2}\n","\n","for i in df2['学力']:\n","  scores.append(di[i])\n","\n","df2['学力'] = scores\n","df2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":219},"id":"LYn3FMa4BVl1","executionInfo":{"status":"error","timestamp":1716903329555,"user_tz":-540,"elapsed":11,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"af0c1a36-9d30-49fc-ed5c-4c8efcf3db20"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"1","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-7ad0c07bac42>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'学力'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m   \u001b[0mscores\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdi\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'学力'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 1"]}]},{"cell_type":"markdown","source":["### <font color='crimson'>訓練データ、テストデータ</font>\n","\n","　データ分割はモデルを客観的に評価するために極めて大事なもので、教師あり学習では不可欠と言っても過言ではありません。なぜモデルの訓練に2つのデータセットが必要なのか直感的にわかりにくいかもしれませんが、まず下の図の例を考えてみてください。\n","\n","<div align=\"center\">\n","\n","<img src=\"https://drive.google.com/uc?export=view&id=1JM5SiUQW_YdBoOPno73PPiLARaKfy9_H\" width=\"90%\">\n","\n","**図 訓練データとテストデータ**\n","</div>\n","\n","　手元に４つの足し算の問題集があるとします。もしも問題集のすべての問題を学習に使うと、ちゃんと勉強できたかの確認の際にも、やったことがある問題でしか評価せざる終えません（左図）。人間の場合でも言えますが、解いたことがある問題をそのままテスト問題として出題してしまうと、**本当に学習者が足し算を理解しているのか？**はわかりません。\n","\n","　これに比べ、事前にきちんと勉強用のデータとテスト用のデータに分けることにより、評価の段階では**1+4**という、学習者が全くやったことのない、訓練データとは独立した問題を解けるかをチェックすることで、**足し算のパターンを理解しているか**を評価することができます（右図）。授業で学んだ練習問題をそのまま試験に出すことがないことと同じく、機械学習でも、訓練には全く使われていない独立したテストデータを用意することで、学習の結果をより客観的に評価することができます。\n"],"metadata":{"id":"4rMzpnz_gwoi"}},{"cell_type":"markdown","source":["pythonでは`sklearn`モジュールを使えば、簡単に訓練データ、テストデータを分けることが可能です。その際、データはシャッフルされ、ランダムに分割されます。"],"metadata":{"id":"2bQHJf_rhNf4"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split # モジュールを読み込む\n","\n","X_train, X_test = train_test_split(df, test_size=0.2, random_state=0)"],"metadata":{"id":"adz1PA05hESI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["ここで\n","\n","- <font color='crimson'>**df**</font>: 最初には元のデータを入れます。\n","\n","- <font color='crimson'>**test_size**</font>: 何割をテストデータとして分割するのかを指定します。\n","\n","- <font color='crimson'>**random_state**</font>: `np.random.seed()同様、乱数をFIXすることが可能です。"],"metadata":{"id":"fAXwXxwih7qY"}},{"cell_type":"code","source":["X_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"cR2F-AZNhoga","executionInfo":{"status":"ok","timestamp":1716903334263,"user_tz":-540,"elapsed":7,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"41f8013a-c67d-49f0-d8d2-e78d3ed8e052"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       通学距離 性別  進路  実家 学力\n","4  3.865408  0  文系  東京  中\n","9   2.75063  1  文系  大阪  高\n","1  2.388244  1  理系  東京  高\n","6  4.744812  1  文系  東京  高\n","7  2.238793  1  文系  東京  中\n","3  1.927031  1  文系  大阪  低\n","0  4.624345  0  理系  東京  中\n","5  0.698461  0  理系  山形  高"],"text/html":["\n","  <div id=\"df-accd7e43-00df-401d-b6db-61aaba263fd7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路</th>\n","      <th>実家</th>\n","      <th>学力</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>3.865408</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>中</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.75063</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","      <td>高</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.388244</td>\n","      <td>1</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","      <td>高</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.744812</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>高</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.238793</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","      <td>中</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.927031</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","      <td>低</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>4.624345</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","      <td>中</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.698461</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>山形</td>\n","      <td>高</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-accd7e43-00df-401d-b6db-61aaba263fd7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-accd7e43-00df-401d-b6db-61aaba263fd7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-accd7e43-00df-401d-b6db-61aaba263fd7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-41ff42e4-6c0c-4548-a353-011ff45f2056\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41ff42e4-6c0c-4548-a353-011ff45f2056')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-41ff42e4-6c0c-4548-a353-011ff45f2056 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.6984613031197173,\n        \"max\": 4.74481176421648,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.75062962452259,\n          1.9270313778438295,\n          3.8654076293246784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\u7406\\u7cfb\",\n          \"\\u6587\\u7cfb\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\u6771\\u4eac\",\n          \"\\u5927\\u962a\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\u4e2d\",\n          \"\\u9ad8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["X_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"vaMNwPJWhx1q","executionInfo":{"status":"ok","timestamp":1716903335917,"user_tz":-540,"elapsed":9,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"de700b85-d3f7-4ded-ad09-3f3748464ffb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       通学距離 性別  進路  実家 学力\n","2  2.471828  0  文系  仙台  低\n","8  3.319039  0  理系  仙台  低"],"text/html":["\n","  <div id=\"df-2cb56a54-5777-4f95-abef-a022d959045d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路</th>\n","      <th>実家</th>\n","      <th>学力</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>2.471828</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>仙台</td>\n","      <td>低</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.319039</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>仙台</td>\n","      <td>低</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cb56a54-5777-4f95-abef-a022d959045d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2cb56a54-5777-4f95-abef-a022d959045d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2cb56a54-5777-4f95-abef-a022d959045d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-66a4b4f5-28f5-4516-9842-dd5d6217aa93\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-66a4b4f5-28f5-4516-9842-dd5d6217aa93')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-66a4b4f5-28f5-4516-9842-dd5d6217aa93 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test","repr_error":"0"}},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["- X, Yで分割するには？\n","\n","入力としてXのみならず, yも入力すれば、`[訓練用X, テスト用X, 訓練用y, テスト用y]`という形で出力されます。"],"metadata":{"id":"zssumh6KiacX"}},{"cell_type":"code","source":["# 例えば、学力を目的変数にする場合\n","target = '学力'\n","X = df.drop(target, axis=1) # targetのみ抜く\n","y = df[target] # targetのみ指定\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n"],"metadata":{"id":"Zh6tA9mMic0x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["display(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":463},"id":"JpEEvli8i31C","executionInfo":{"status":"ok","timestamp":1716903339132,"user_tz":-540,"elapsed":11,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"542ab0a2-852d-4b38-cd62-4289e7410f3b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["       通学距離 性別  進路  実家\n","4  3.865408  0  文系  東京\n","9   2.75063  1  文系  大阪\n","1  2.388244  1  理系  東京\n","6  4.744812  1  文系  東京\n","7  2.238793  1  文系  東京\n","3  1.927031  1  文系  大阪\n","0  4.624345  0  理系  東京\n","5  0.698461  0  理系  山形"],"text/html":["\n","  <div id=\"df-230e4774-4e53-477d-aa7c-b820fd44ded6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路</th>\n","      <th>実家</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>3.865408</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.75063</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.388244</td>\n","      <td>1</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.744812</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.238793</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>東京</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.927031</td>\n","      <td>1</td>\n","      <td>文系</td>\n","      <td>大阪</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>4.624345</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>東京</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.698461</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>山形</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-230e4774-4e53-477d-aa7c-b820fd44ded6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-230e4774-4e53-477d-aa7c-b820fd44ded6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-230e4774-4e53-477d-aa7c-b820fd44ded6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-274861fd-6555-4e23-8629-8f55f9f0a6f5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-274861fd-6555-4e23-8629-8f55f9f0a6f5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-274861fd-6555-4e23-8629-8f55f9f0a6f5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.6984613031197173,\n        \"max\": 4.74481176421648,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.75062962452259,\n          1.9270313778438295,\n          3.8654076293246784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\u7406\\u7cfb\",\n          \"\\u6587\\u7cfb\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\u6771\\u4eac\",\n          \"\\u5927\\u962a\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["4    中\n","9    高\n","1    高\n","6    高\n","7    中\n","3    低\n","0    中\n","5    高\n","Name: 学力, dtype: object"]},"metadata":{}}]},{"cell_type":"code","source":["display(X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":166},"id":"GUhRkULCi7YY","executionInfo":{"status":"ok","timestamp":1716903340258,"user_tz":-540,"elapsed":11,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"6dfaab4b-32f9-4bf8-8ec1-9a968da6deaa"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["       通学距離 性別  進路  実家\n","2  2.471828  0  文系  仙台\n","8  3.319039  0  理系  仙台"],"text/html":["\n","  <div id=\"df-79e0acb6-f31e-4d3e-bb1a-b52d0acd7544\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路</th>\n","      <th>実家</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>2.471828</td>\n","      <td>0</td>\n","      <td>文系</td>\n","      <td>仙台</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.319039</td>\n","      <td>0</td>\n","      <td>理系</td>\n","      <td>仙台</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-79e0acb6-f31e-4d3e-bb1a-b52d0acd7544')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-79e0acb6-f31e-4d3e-bb1a-b52d0acd7544 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-79e0acb6-f31e-4d3e-bb1a-b52d0acd7544');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-235f9c2c-61cc-4bea-9a73-92f5aa51c906\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-235f9c2c-61cc-4bea-9a73-92f5aa51c906')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-235f9c2c-61cc-4bea-9a73-92f5aa51c906 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test","repr_error":"0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["2    低\n","8    低\n","Name: 学力, dtype: object"]},"metadata":{}}]},{"cell_type":"markdown","source":["### <font color='crimson'>データ標準化</font>\n","\n","次にデータの標準化について説明します。\n","\n","データの標準化は様々な方法がありますが、本演習ではデータを平均0、分散1となるような標準化で説明します。\n","\n","> なぜ標準化？\n","\n","通常データ分析における列の単位は揃ってないため、例えば偏回帰係数の比較が変数同士でできなくなります。例えば $$\\hat{アイスの売上} = 0.3 * 広報 + 0.7 * 気温$$のケースでも、単位（広報は円、気温は度数）が違うため、気温の影響力が広報より強いと言えません。\n","\n","データを標準化することにより、相対的に影響力が強い変数を見つけることが可能になります。\n","\n","また、最適化の都合上（特に深層学習などで）、スケールを揃うことでモデルの学習効率なども向上することがあります。\n","\n","> いつ標準化を使う？\n","\n","- 変数同士の比較が必要な時、例えば**Lasso回帰**を使うときに、データの標準化が推薦されます。\n","\n","- 他にも、偏回帰係数の解釈にこだわりがない場合は、基本標準化してから、データ分析してよいと思われます。\n","\n","pythonでは`sklearn.preprocessing`モジュールの `StandardScaler`で標準化は簡単に実行できます。\n","\n"],"metadata":{"id":"3guXdYsPj7Xx"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","display(newdf) # 前処理されたデータを使います。\n","normdf = newdf.copy() # コピー\n","norm = StandardScaler() # 標準化関数の定義\n","normdf[newdf.columns] = norm.fit_transform(newdf) # 標準化を行います。\n","display(normdf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":726},"id":"KRxmGfDij62A","executionInfo":{"status":"ok","timestamp":1716903342509,"user_tz":-540,"elapsed":536,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"457e5ab7-f488-4029-f7ab-9db139164086"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["       通学距離 性別  進路_理系  実家_大阪  実家_山形  実家_東京  学力_低  学力_高\n","0  4.624345  0      1      0      0      1     0     0\n","1  2.388244  1      1      0      0      1     0     1\n","2  2.471828  0      0      0      0      0     1     0\n","3  1.927031  1      0      1      0      0     1     0\n","4  3.865408  0      0      0      0      1     0     0\n","5  0.698461  0      1      0      1      0     0     1\n","6  4.744812  1      0      0      0      1     0     1\n","7  2.238793  1      0      0      0      1     0     0\n","8  3.319039  0      1      0      0      0     1     0\n","9   2.75063  1      0      1      0      0     0     1"],"text/html":["\n","  <div id=\"df-2f2073c1-b162-46d5-b8d9-8ce67f2492f8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路_理系</th>\n","      <th>実家_大阪</th>\n","      <th>実家_山形</th>\n","      <th>実家_東京</th>\n","      <th>学力_低</th>\n","      <th>学力_高</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.624345</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.388244</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.471828</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.927031</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.865408</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.698461</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.744812</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.238793</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.319039</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.75063</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f2073c1-b162-46d5-b8d9-8ce67f2492f8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2f2073c1-b162-46d5-b8d9-8ce67f2492f8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2f2073c1-b162-46d5-b8d9-8ce67f2492f8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9d7a5678-e973-48dc-813b-cec3c948ba12\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d7a5678-e973-48dc-813b-cec3c948ba12')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9d7a5678-e973-48dc-813b-cec3c948ba12 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"newdf","summary":"{\n  \"name\": \"newdf\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.6984613031197173,\n        \"max\": 4.74481176421648,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          3.3190390960570983,\n          2.3882435863499247,\n          0.6984613031197173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def_\\u7406\\u7cfb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5c71\\u5f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u4f4e\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["       通学距離   性別     進路_理系  実家_大阪     実家_山形  実家_東京      学力_低      学力_高\n","0  1.445536 -1.0  1.224745   -0.5 -0.333333    1.0 -0.654654 -0.816497\n","1 -0.432124  1.0  1.224745   -0.5 -0.333333    1.0 -0.654654  1.224745\n","2 -0.361938 -1.0 -0.816497   -0.5 -0.333333   -1.0  1.527525 -0.816497\n","3 -0.819405  1.0 -0.816497    2.0 -0.333333   -1.0  1.527525 -0.816497\n","4  0.808254 -1.0 -0.816497   -0.5 -0.333333    1.0 -0.654654 -0.816497\n","5 -1.851037 -1.0  1.224745   -0.5  3.000000   -1.0 -0.654654  1.224745\n","6  1.546691  1.0 -0.816497   -0.5 -0.333333    1.0 -0.654654  1.224745\n","7 -0.557618  1.0 -0.816497   -0.5 -0.333333    1.0 -0.654654 -0.816497\n","8  0.349467 -1.0  1.224745   -0.5 -0.333333   -1.0  1.527525 -0.816497\n","9 -0.127827  1.0 -0.816497    2.0 -0.333333   -1.0 -0.654654  1.224745"],"text/html":["\n","  <div id=\"df-7f382a58-75d6-4580-90a2-6388595816a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路_理系</th>\n","      <th>実家_大阪</th>\n","      <th>実家_山形</th>\n","      <th>実家_東京</th>\n","      <th>学力_低</th>\n","      <th>学力_高</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.445536</td>\n","      <td>-1.0</td>\n","      <td>1.224745</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.432124</td>\n","      <td>1.0</td>\n","      <td>1.224745</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>1.224745</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.361938</td>\n","      <td>-1.0</td>\n","      <td>-0.816497</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>-1.0</td>\n","      <td>1.527525</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.819405</td>\n","      <td>1.0</td>\n","      <td>-0.816497</td>\n","      <td>2.0</td>\n","      <td>-0.333333</td>\n","      <td>-1.0</td>\n","      <td>1.527525</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.808254</td>\n","      <td>-1.0</td>\n","      <td>-0.816497</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>-1.851037</td>\n","      <td>-1.0</td>\n","      <td>1.224745</td>\n","      <td>-0.5</td>\n","      <td>3.000000</td>\n","      <td>-1.0</td>\n","      <td>-0.654654</td>\n","      <td>1.224745</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1.546691</td>\n","      <td>1.0</td>\n","      <td>-0.816497</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>1.224745</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>-0.557618</td>\n","      <td>1.0</td>\n","      <td>-0.816497</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.349467</td>\n","      <td>-1.0</td>\n","      <td>1.224745</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>-1.0</td>\n","      <td>1.527525</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>-0.127827</td>\n","      <td>1.0</td>\n","      <td>-0.816497</td>\n","      <td>2.0</td>\n","      <td>-0.333333</td>\n","      <td>-1.0</td>\n","      <td>-0.654654</td>\n","      <td>1.224745</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f382a58-75d6-4580-90a2-6388595816a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7f382a58-75d6-4580-90a2-6388595816a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7f382a58-75d6-4580-90a2-6388595816a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3ff372c5-7028-49be-8568-65d551329f09\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3ff372c5-7028-49be-8568-65d551329f09')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3ff372c5-7028-49be-8568-65d551329f09 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"normdf","summary":"{\n  \"name\": \"normdf\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894596,\n        \"min\": -1.8510374391284823,\n        \"max\": 1.5466914892375678,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.3494672036857651,\n          -0.4321237287190536,\n          -1.8510374391284823\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894598,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          -1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def_\\u7406\\u7cfb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894596,\n        \"min\": -0.816496580927726,\n        \"max\": 1.224744871391589,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.816496580927726,\n          1.224744871391589\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894596,\n        \"min\": -0.49999999999999994,\n        \"max\": 1.9999999999999998,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.9999999999999998,\n          -0.49999999999999994\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5c71\\u5f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894596,\n        \"min\": -0.3333333333333333,\n        \"max\": 2.9999999999999996,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.9999999999999996,\n          -0.3333333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894598,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -1.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u4f4e\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894598,\n        \"min\": -0.6546536707079772,\n        \"max\": 1.5275252316519468,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.5275252316519468,\n          -0.6546536707079772\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894598,\n        \"min\": -0.8164965809277261,\n        \"max\": 1.2247448713915892,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.2247448713915892,\n          -0.8164965809277261\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["`normdf[newdf.columns] = norm.fit_transform(newdf)`の意味"],"metadata":{"id":"RzTp5rVnj0vg"}},{"cell_type":"code","source":["# これだけ実行すると、データフレームではなく、numpy行列が戻ってきます。\n","norm.fit_transform(newdf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BjooqHj_p2mR","executionInfo":{"status":"ok","timestamp":1716903344165,"user_tz":-540,"elapsed":7,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"dee24640-edf1-4b6b-caf9-80a656e9b876"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.4455356 , -1.        ,  1.22474487, -0.5       , -0.33333333,\n","         1.        , -0.65465367, -0.81649658],\n","       [-0.43212373,  1.        ,  1.22474487, -0.5       , -0.33333333,\n","         1.        , -0.65465367,  1.22474487],\n","       [-0.36193751, -1.        , -0.81649658, -0.5       , -0.33333333,\n","        -1.        ,  1.52752523, -0.81649658],\n","       [-0.81940458,  1.        , -0.81649658,  2.        , -0.33333333,\n","        -1.        ,  1.52752523, -0.81649658],\n","       [ 0.808254  , -1.        , -0.81649658, -0.5       , -0.33333333,\n","         1.        , -0.65465367, -0.81649658],\n","       [-1.85103744, -1.        ,  1.22474487, -0.5       ,  3.        ,\n","        -1.        , -0.65465367,  1.22474487],\n","       [ 1.54669149,  1.        , -0.81649658, -0.5       , -0.33333333,\n","         1.        , -0.65465367,  1.22474487],\n","       [-0.55761761,  1.        , -0.81649658, -0.5       , -0.33333333,\n","         1.        , -0.65465367, -0.81649658],\n","       [ 0.3494672 , -1.        ,  1.22474487, -0.5       , -0.33333333,\n","        -1.        ,  1.52752523, -0.81649658],\n","       [-0.12782742,  1.        , -0.81649658,  2.        , -0.33333333,\n","        -1.        , -0.65465367,  1.22474487]])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["normdf[newdf.columns] = norm.fit_transform(newdf) # データフレームに要素を代入\n","display(normdf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":380},"id":"olpypttgp-hh","executionInfo":{"status":"ok","timestamp":1716903346179,"user_tz":-540,"elapsed":543,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"348de6aa-44fd-44aa-bc00-5a37c795b78e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["       通学距離   性別     進路_理系  実家_大阪     実家_山形  実家_東京      学力_低      学力_高\n","0  1.445536 -1.0  1.224745   -0.5 -0.333333    1.0 -0.654654 -0.816497\n","1 -0.432124  1.0  1.224745   -0.5 -0.333333    1.0 -0.654654  1.224745\n","2 -0.361938 -1.0 -0.816497   -0.5 -0.333333   -1.0  1.527525 -0.816497\n","3 -0.819405  1.0 -0.816497    2.0 -0.333333   -1.0  1.527525 -0.816497\n","4  0.808254 -1.0 -0.816497   -0.5 -0.333333    1.0 -0.654654 -0.816497\n","5 -1.851037 -1.0  1.224745   -0.5  3.000000   -1.0 -0.654654  1.224745\n","6  1.546691  1.0 -0.816497   -0.5 -0.333333    1.0 -0.654654  1.224745\n","7 -0.557618  1.0 -0.816497   -0.5 -0.333333    1.0 -0.654654 -0.816497\n","8  0.349467 -1.0  1.224745   -0.5 -0.333333   -1.0  1.527525 -0.816497\n","9 -0.127827  1.0 -0.816497    2.0 -0.333333   -1.0 -0.654654  1.224745"],"text/html":["\n","  <div id=\"df-280ba613-50e8-47a9-82f8-33c77055c163\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>通学距離</th>\n","      <th>性別</th>\n","      <th>進路_理系</th>\n","      <th>実家_大阪</th>\n","      <th>実家_山形</th>\n","      <th>実家_東京</th>\n","      <th>学力_低</th>\n","      <th>学力_高</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.445536</td>\n","      <td>-1.0</td>\n","      <td>1.224745</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.432124</td>\n","      <td>1.0</td>\n","      <td>1.224745</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>1.224745</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.361938</td>\n","      <td>-1.0</td>\n","      <td>-0.816497</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>-1.0</td>\n","      <td>1.527525</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.819405</td>\n","      <td>1.0</td>\n","      <td>-0.816497</td>\n","      <td>2.0</td>\n","      <td>-0.333333</td>\n","      <td>-1.0</td>\n","      <td>1.527525</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.808254</td>\n","      <td>-1.0</td>\n","      <td>-0.816497</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>-1.851037</td>\n","      <td>-1.0</td>\n","      <td>1.224745</td>\n","      <td>-0.5</td>\n","      <td>3.000000</td>\n","      <td>-1.0</td>\n","      <td>-0.654654</td>\n","      <td>1.224745</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1.546691</td>\n","      <td>1.0</td>\n","      <td>-0.816497</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>1.224745</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>-0.557618</td>\n","      <td>1.0</td>\n","      <td>-0.816497</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>1.0</td>\n","      <td>-0.654654</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.349467</td>\n","      <td>-1.0</td>\n","      <td>1.224745</td>\n","      <td>-0.5</td>\n","      <td>-0.333333</td>\n","      <td>-1.0</td>\n","      <td>1.527525</td>\n","      <td>-0.816497</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>-0.127827</td>\n","      <td>1.0</td>\n","      <td>-0.816497</td>\n","      <td>2.0</td>\n","      <td>-0.333333</td>\n","      <td>-1.0</td>\n","      <td>-0.654654</td>\n","      <td>1.224745</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-280ba613-50e8-47a9-82f8-33c77055c163')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-280ba613-50e8-47a9-82f8-33c77055c163 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-280ba613-50e8-47a9-82f8-33c77055c163');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f39e7cb1-3705-4a7d-b000-919950faf060\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f39e7cb1-3705-4a7d-b000-919950faf060')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f39e7cb1-3705-4a7d-b000-919950faf060 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"normdf","summary":"{\n  \"name\": \"normdf\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"\\u901a\\u5b66\\u8ddd\\u96e2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894596,\n        \"min\": -1.8510374391284823,\n        \"max\": 1.5466914892375678,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.3494672036857651,\n          -0.4321237287190536,\n          -1.8510374391284823\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894598,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          -1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9032\\u8def_\\u7406\\u7cfb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894596,\n        \"min\": -0.816496580927726,\n        \"max\": 1.224744871391589,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.816496580927726,\n          1.224744871391589\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5927\\u962a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894596,\n        \"min\": -0.49999999999999994,\n        \"max\": 1.9999999999999998,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.9999999999999998,\n          -0.49999999999999994\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u5c71\\u5f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894596,\n        \"min\": -0.3333333333333333,\n        \"max\": 2.9999999999999996,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.9999999999999996,\n          -0.3333333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b9f\\u5bb6_\\u6771\\u4eac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894598,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -1.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u4f4e\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894598,\n        \"min\": -0.6546536707079772,\n        \"max\": 1.5275252316519468,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.5275252316519468,\n          -0.6546536707079772\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5b66\\u529b_\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0540925533894598,\n        \"min\": -0.8164965809277261,\n        \"max\": 1.2247448713915892,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.2247448713915892,\n          -0.8164965809277261\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["## 6.2 <font color='crimson'>モデル評価</font>\n","\n","前回はまだ回帰分析と、回帰係数のみしか触れてないので、今回は予測、およびモデル評価について紹介します。\n","\n","前回使ったwageデータを使って説明します。"],"metadata":{"id":"CvP-0BKBqWFB"}},{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_csv('https://raw.githubusercontent.com/dgod1028/Research/main/data/wage1.csv',index_col=0)\n","display(df)"],"metadata":{"id":"LVeZVS9VjvSY","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"ok","timestamp":1716903347691,"user_tz":-540,"elapsed":11,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"1685f374-ba6d-4384-a6b7-89bf2d1c06d6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["      wage  educ  exper  tenure  nonwhite  female  married  numdep  smsa  \\\n","1     3.10    11      2       0         0       1        0       2     1   \n","2     3.24    12     22       2         0       1        1       3     1   \n","3     3.00    11      2       0         0       0        0       2     0   \n","4     6.00     8     44      28         0       0        1       0     1   \n","5     5.30    12      7       2         0       0        1       1     0   \n","..     ...   ...    ...     ...       ...     ...      ...     ...   ...   \n","522  15.00    16     14       2         0       1        1       2     0   \n","523   2.27    10      2       0         0       1        0       3     0   \n","524   4.67    15     13      18         0       0        1       3     0   \n","525  11.56    16      5       1         0       0        1       0     0   \n","526   3.50    14      5       4         1       1        0       2     0   \n","\n","     northcen  ...  trcommpu  trade  services  profserv  profocc  clerocc  \\\n","1           0  ...         0      0         0         0        0        0   \n","2           0  ...         0      0         1         0        0        0   \n","3           0  ...         0      1         0         0        0        0   \n","4           0  ...         0      0         0         0        0        1   \n","5           0  ...         0      0         0         0        0        0   \n","..        ...  ...       ...    ...       ...       ...      ...      ...   \n","522         0  ...         0      0         0         1        1        0   \n","523         0  ...         0      1         0         0        1        0   \n","524         0  ...         0      0         0         0        1        0   \n","525         0  ...         0      0         0         0        0        0   \n","526         0  ...         0      0         0         1        0        1   \n","\n","     servocc     lwage  expersq  tenursq  \n","1          0  1.131402        4        0  \n","2          1  1.175573      484        4  \n","3          0  1.098612        4        0  \n","4          0  1.791759     1936      784  \n","5          0  1.667707       49        4  \n","..       ...       ...      ...      ...  \n","522        0  2.708050      196        4  \n","523        0  0.819780        4        0  \n","524        0  1.541159      169      324  \n","525        0  2.447551       25        1  \n","526        0  1.252763       25       16  \n","\n","[526 rows x 24 columns]"],"text/html":["\n","  <div id=\"df-6c40b744-4d3e-4699-8e17-4a182ad88f3b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>wage</th>\n","      <th>educ</th>\n","      <th>exper</th>\n","      <th>tenure</th>\n","      <th>nonwhite</th>\n","      <th>female</th>\n","      <th>married</th>\n","      <th>numdep</th>\n","      <th>smsa</th>\n","      <th>northcen</th>\n","      <th>...</th>\n","      <th>trcommpu</th>\n","      <th>trade</th>\n","      <th>services</th>\n","      <th>profserv</th>\n","      <th>profocc</th>\n","      <th>clerocc</th>\n","      <th>servocc</th>\n","      <th>lwage</th>\n","      <th>expersq</th>\n","      <th>tenursq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>3.10</td>\n","      <td>11</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.131402</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1.175573</td>\n","      <td>484</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.00</td>\n","      <td>11</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.098612</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6.00</td>\n","      <td>8</td>\n","      <td>44</td>\n","      <td>28</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.791759</td>\n","      <td>1936</td>\n","      <td>784</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5.30</td>\n","      <td>12</td>\n","      <td>7</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.667707</td>\n","      <td>49</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>522</th>\n","      <td>15.00</td>\n","      <td>16</td>\n","      <td>14</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2.708050</td>\n","      <td>196</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>523</th>\n","      <td>2.27</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.819780</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>524</th>\n","      <td>4.67</td>\n","      <td>15</td>\n","      <td>13</td>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.541159</td>\n","      <td>169</td>\n","      <td>324</td>\n","    </tr>\n","    <tr>\n","      <th>525</th>\n","      <td>11.56</td>\n","      <td>16</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2.447551</td>\n","      <td>25</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>526</th>\n","      <td>3.50</td>\n","      <td>14</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.252763</td>\n","      <td>25</td>\n","      <td>16</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>526 rows × 24 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c40b744-4d3e-4699-8e17-4a182ad88f3b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6c40b744-4d3e-4699-8e17-4a182ad88f3b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6c40b744-4d3e-4699-8e17-4a182ad88f3b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5c95869e-9306-4457-b17d-649cac1c0769\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5c95869e-9306-4457-b17d-649cac1c0769')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5c95869e-9306-4457-b17d-649cac1c0769 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{}}]},{"cell_type":"code","source":["# wageを捨てる\n","df = df.drop('wage', axis=1)\n","\n","# まずはデータを目的変数、説明変数に分割\n","target = 'lwage'\n","X = df.drop(target, axis=1)\n","y = df[target]\n","\n","from sklearn.model_selection import train_test_split # モジュールを読み込む\n","\n","# 訓練データ、テストデータの作成\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)\n"],"metadata":{"id":"xYd-0AQRqdEJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import statsmodels.api as sm # モジュールの読み込み\n","\n","model = sm.OLS(y_train, sm.add_constant(X_train)) # Y,　Xを入力\n","result = model.fit() # OLS推定を行う\n","result.summary() # 結果の出力"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":918},"id":"kWbHZBELrjjJ","executionInfo":{"status":"ok","timestamp":1716903350974,"user_tz":-540,"elapsed":1612,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"813e3d64-98b5-478a-9661-554710c50a1d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:                  lwage   R-squared:                       0.558\n","Model:                            OLS   Adj. R-squared:                  0.534\n","Method:                 Least Squares   F-statistic:                     22.82\n","Date:                Tue, 28 May 2024   Prob (F-statistic):           3.67e-57\n","Time:                        13:35:49   Log-Likelihood:                -158.26\n","No. Observations:                 420   AIC:                             362.5\n","Df Residuals:                     397   BIC:                             455.4\n","Df Model:                          22                                         \n","Covariance Type:            nonrobust                                         \n","==============================================================================\n","                 coef    std err          t      P>|t|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const          0.9447      0.131      7.201      0.000       0.687       1.203\n","educ           0.0447      0.009      5.121      0.000       0.028       0.062\n","exper          0.0259      0.006      4.611      0.000       0.015       0.037\n","tenure         0.0297      0.008      3.721      0.000       0.014       0.045\n","nonwhite       0.0161      0.064      0.252      0.801      -0.109       0.141\n","female        -0.2412      0.042     -5.772      0.000      -0.323      -0.159\n","married        0.0487      0.043      1.138      0.256      -0.035       0.133\n","numdep        -0.0259      0.016     -1.654      0.099      -0.057       0.005\n","smsa           0.1431      0.043      3.359      0.001       0.059       0.227\n","northcen      -0.0763      0.052     -1.456      0.146      -0.179       0.027\n","south         -0.0688      0.050     -1.377      0.169      -0.167       0.029\n","west           0.0329      0.057      0.577      0.564      -0.079       0.145\n","construc      -0.0008      0.097     -0.008      0.994      -0.191       0.190\n","ndurman       -0.1004      0.072     -1.393      0.164      -0.242       0.041\n","trcommpu      -0.1047      0.106     -0.993      0.322      -0.312       0.103\n","trade         -0.3062      0.060     -5.120      0.000      -0.424      -0.189\n","services      -0.3350      0.076     -4.435      0.000      -0.484      -0.187\n","profserv      -0.0632      0.065     -0.977      0.329      -0.190       0.064\n","profocc        0.2186      0.055      3.942      0.000       0.110       0.328\n","clerocc        0.0144      0.064      0.226      0.821      -0.111       0.140\n","servocc       -0.1079      0.062     -1.732      0.084      -0.231       0.015\n","expersq       -0.0006      0.000     -4.776      0.000      -0.001      -0.000\n","tenursq       -0.0007      0.000     -2.423      0.016      -0.001      -0.000\n","==============================================================================\n","Omnibus:                       16.797   Durbin-Watson:                   1.981\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):               40.511\n","Skew:                          -0.035   Prob(JB):                     1.60e-09\n","Kurtosis:                       4.520   Cond. No.                     6.94e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","[2] The condition number is large, 6.94e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>OLS Regression Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>          <td>lwage</td>      <th>  R-squared:         </th> <td>   0.558</td>\n","</tr>\n","<tr>\n","  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.534</td>\n","</tr>\n","<tr>\n","  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   22.82</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>             <td>Tue, 28 May 2024</td> <th>  Prob (F-statistic):</th> <td>3.67e-57</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                 <td>13:35:49</td>     <th>  Log-Likelihood:    </th> <td> -158.26</td>\n","</tr>\n","<tr>\n","  <th>No. Observations:</th>      <td>   420</td>      <th>  AIC:               </th> <td>   362.5</td>\n","</tr>\n","<tr>\n","  <th>Df Residuals:</th>          <td>   397</td>      <th>  BIC:               </th> <td>   455.4</td>\n","</tr>\n","<tr>\n","  <th>Df Model:</th>              <td>    22</td>      <th>                     </th>     <td> </td>   \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","      <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>const</th>    <td>    0.9447</td> <td>    0.131</td> <td>    7.201</td> <td> 0.000</td> <td>    0.687</td> <td>    1.203</td>\n","</tr>\n","<tr>\n","  <th>educ</th>     <td>    0.0447</td> <td>    0.009</td> <td>    5.121</td> <td> 0.000</td> <td>    0.028</td> <td>    0.062</td>\n","</tr>\n","<tr>\n","  <th>exper</th>    <td>    0.0259</td> <td>    0.006</td> <td>    4.611</td> <td> 0.000</td> <td>    0.015</td> <td>    0.037</td>\n","</tr>\n","<tr>\n","  <th>tenure</th>   <td>    0.0297</td> <td>    0.008</td> <td>    3.721</td> <td> 0.000</td> <td>    0.014</td> <td>    0.045</td>\n","</tr>\n","<tr>\n","  <th>nonwhite</th> <td>    0.0161</td> <td>    0.064</td> <td>    0.252</td> <td> 0.801</td> <td>   -0.109</td> <td>    0.141</td>\n","</tr>\n","<tr>\n","  <th>female</th>   <td>   -0.2412</td> <td>    0.042</td> <td>   -5.772</td> <td> 0.000</td> <td>   -0.323</td> <td>   -0.159</td>\n","</tr>\n","<tr>\n","  <th>married</th>  <td>    0.0487</td> <td>    0.043</td> <td>    1.138</td> <td> 0.256</td> <td>   -0.035</td> <td>    0.133</td>\n","</tr>\n","<tr>\n","  <th>numdep</th>   <td>   -0.0259</td> <td>    0.016</td> <td>   -1.654</td> <td> 0.099</td> <td>   -0.057</td> <td>    0.005</td>\n","</tr>\n","<tr>\n","  <th>smsa</th>     <td>    0.1431</td> <td>    0.043</td> <td>    3.359</td> <td> 0.001</td> <td>    0.059</td> <td>    0.227</td>\n","</tr>\n","<tr>\n","  <th>northcen</th> <td>   -0.0763</td> <td>    0.052</td> <td>   -1.456</td> <td> 0.146</td> <td>   -0.179</td> <td>    0.027</td>\n","</tr>\n","<tr>\n","  <th>south</th>    <td>   -0.0688</td> <td>    0.050</td> <td>   -1.377</td> <td> 0.169</td> <td>   -0.167</td> <td>    0.029</td>\n","</tr>\n","<tr>\n","  <th>west</th>     <td>    0.0329</td> <td>    0.057</td> <td>    0.577</td> <td> 0.564</td> <td>   -0.079</td> <td>    0.145</td>\n","</tr>\n","<tr>\n","  <th>construc</th> <td>   -0.0008</td> <td>    0.097</td> <td>   -0.008</td> <td> 0.994</td> <td>   -0.191</td> <td>    0.190</td>\n","</tr>\n","<tr>\n","  <th>ndurman</th>  <td>   -0.1004</td> <td>    0.072</td> <td>   -1.393</td> <td> 0.164</td> <td>   -0.242</td> <td>    0.041</td>\n","</tr>\n","<tr>\n","  <th>trcommpu</th> <td>   -0.1047</td> <td>    0.106</td> <td>   -0.993</td> <td> 0.322</td> <td>   -0.312</td> <td>    0.103</td>\n","</tr>\n","<tr>\n","  <th>trade</th>    <td>   -0.3062</td> <td>    0.060</td> <td>   -5.120</td> <td> 0.000</td> <td>   -0.424</td> <td>   -0.189</td>\n","</tr>\n","<tr>\n","  <th>services</th> <td>   -0.3350</td> <td>    0.076</td> <td>   -4.435</td> <td> 0.000</td> <td>   -0.484</td> <td>   -0.187</td>\n","</tr>\n","<tr>\n","  <th>profserv</th> <td>   -0.0632</td> <td>    0.065</td> <td>   -0.977</td> <td> 0.329</td> <td>   -0.190</td> <td>    0.064</td>\n","</tr>\n","<tr>\n","  <th>profocc</th>  <td>    0.2186</td> <td>    0.055</td> <td>    3.942</td> <td> 0.000</td> <td>    0.110</td> <td>    0.328</td>\n","</tr>\n","<tr>\n","  <th>clerocc</th>  <td>    0.0144</td> <td>    0.064</td> <td>    0.226</td> <td> 0.821</td> <td>   -0.111</td> <td>    0.140</td>\n","</tr>\n","<tr>\n","  <th>servocc</th>  <td>   -0.1079</td> <td>    0.062</td> <td>   -1.732</td> <td> 0.084</td> <td>   -0.231</td> <td>    0.015</td>\n","</tr>\n","<tr>\n","  <th>expersq</th>  <td>   -0.0006</td> <td>    0.000</td> <td>   -4.776</td> <td> 0.000</td> <td>   -0.001</td> <td>   -0.000</td>\n","</tr>\n","<tr>\n","  <th>tenursq</th>  <td>   -0.0007</td> <td>    0.000</td> <td>   -2.423</td> <td> 0.016</td> <td>   -0.001</td> <td>   -0.000</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Omnibus:</th>       <td>16.797</td> <th>  Durbin-Watson:     </th> <td>   1.981</td>\n","</tr>\n","<tr>\n","  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  40.511</td>\n","</tr>\n","<tr>\n","  <th>Skew:</th>          <td>-0.035</td> <th>  Prob(JB):          </th> <td>1.60e-09</td>\n","</tr>\n","<tr>\n","  <th>Kurtosis:</th>      <td> 4.520</td> <th>  Cond. No.          </th> <td>6.94e+03</td>\n","</tr>\n","</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 6.94e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems."],"text/latex":"\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    &      lwage       & \\textbf{  R-squared:         } &     0.558   \\\\\n\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.534   \\\\\n\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     22.82   \\\\\n\\textbf{Date:}             & Tue, 28 May 2024 & \\textbf{  Prob (F-statistic):} &  3.67e-57   \\\\\n\\textbf{Time:}             &     13:35:49     & \\textbf{  Log-Likelihood:    } &   -158.26   \\\\\n\\textbf{No. Observations:} &         420      & \\textbf{  AIC:               } &     362.5   \\\\\n\\textbf{Df Residuals:}     &         397      & \\textbf{  BIC:               } &     455.4   \\\\\n\\textbf{Df Model:}         &          22      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                  & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const}    &       0.9447  &        0.131     &     7.201  &         0.000        &        0.687    &        1.203     \\\\\n\\textbf{educ}     &       0.0447  &        0.009     &     5.121  &         0.000        &        0.028    &        0.062     \\\\\n\\textbf{exper}    &       0.0259  &        0.006     &     4.611  &         0.000        &        0.015    &        0.037     \\\\\n\\textbf{tenure}   &       0.0297  &        0.008     &     3.721  &         0.000        &        0.014    &        0.045     \\\\\n\\textbf{nonwhite} &       0.0161  &        0.064     &     0.252  &         0.801        &       -0.109    &        0.141     \\\\\n\\textbf{female}   &      -0.2412  &        0.042     &    -5.772  &         0.000        &       -0.323    &       -0.159     \\\\\n\\textbf{married}  &       0.0487  &        0.043     &     1.138  &         0.256        &       -0.035    &        0.133     \\\\\n\\textbf{numdep}   &      -0.0259  &        0.016     &    -1.654  &         0.099        &       -0.057    &        0.005     \\\\\n\\textbf{smsa}     &       0.1431  &        0.043     &     3.359  &         0.001        &        0.059    &        0.227     \\\\\n\\textbf{northcen} &      -0.0763  &        0.052     &    -1.456  &         0.146        &       -0.179    &        0.027     \\\\\n\\textbf{south}    &      -0.0688  &        0.050     &    -1.377  &         0.169        &       -0.167    &        0.029     \\\\\n\\textbf{west}     &       0.0329  &        0.057     &     0.577  &         0.564        &       -0.079    &        0.145     \\\\\n\\textbf{construc} &      -0.0008  &        0.097     &    -0.008  &         0.994        &       -0.191    &        0.190     \\\\\n\\textbf{ndurman}  &      -0.1004  &        0.072     &    -1.393  &         0.164        &       -0.242    &        0.041     \\\\\n\\textbf{trcommpu} &      -0.1047  &        0.106     &    -0.993  &         0.322        &       -0.312    &        0.103     \\\\\n\\textbf{trade}    &      -0.3062  &        0.060     &    -5.120  &         0.000        &       -0.424    &       -0.189     \\\\\n\\textbf{services} &      -0.3350  &        0.076     &    -4.435  &         0.000        &       -0.484    &       -0.187     \\\\\n\\textbf{profserv} &      -0.0632  &        0.065     &    -0.977  &         0.329        &       -0.190    &        0.064     \\\\\n\\textbf{profocc}  &       0.2186  &        0.055     &     3.942  &         0.000        &        0.110    &        0.328     \\\\\n\\textbf{clerocc}  &       0.0144  &        0.064     &     0.226  &         0.821        &       -0.111    &        0.140     \\\\\n\\textbf{servocc}  &      -0.1079  &        0.062     &    -1.732  &         0.084        &       -0.231    &        0.015     \\\\\n\\textbf{expersq}  &      -0.0006  &        0.000     &    -4.776  &         0.000        &       -0.001    &       -0.000     \\\\\n\\textbf{tenursq}  &      -0.0007  &        0.000     &    -2.423  &         0.016        &       -0.001    &       -0.000     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 16.797 & \\textbf{  Durbin-Watson:     } &    1.981  \\\\\n\\textbf{Prob(Omnibus):} &  0.000 & \\textbf{  Jarque-Bera (JB):  } &   40.511  \\\\\n\\textbf{Skew:}          & -0.035 & \\textbf{  Prob(JB):          } & 1.60e-09  \\\\\n\\textbf{Kurtosis:}      &  4.520 & \\textbf{  Cond. No.          } & 6.94e+03  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. \\newline\n [2] The condition number is large, 6.94e+03. This might indicate that there are \\newline\n strong multicollinearity or other numerical problems."},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["モデル評価は、訓練データ、もしくはテストデータに対し、モデルの推定値$\\hat{y}$と真の値$y$の比較により行います。\n","\n","まず、モデルを使って予測を行ってみましょう（$\\hat{y}$の計算）。\n","\n","### <font color='crimson'>**予測**</font>\n","\n","予測を行う際には、`result.predict()`を使います。"],"metadata":{"id":"e3B17ztfvwQo"}},{"cell_type":"code","source":["X_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"zJfruGLAf_Z9","executionInfo":{"status":"ok","timestamp":1716903353346,"user_tz":-540,"elapsed":9,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"8ca03d71-c112-4995-b644-1ce70d4706f7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     educ  exper  tenure  nonwhite  female  married  numdep  smsa  northcen  \\\n","516    12     17       0         0       1        1       2     0         0   \n","359    16     11       0         0       0        1       0     1         1   \n","399    12     34       5         0       0        1       0     0         0   \n","25     11     37       8         1       1        0       0     1         0   \n","303     8     33       2         0       0        1       0     0         0   \n","..    ...    ...     ...       ...     ...      ...     ...   ...       ...   \n","440    12     22       4         0       0        1       1     0         0   \n","242    12     15       5         0       1        1       1     0         0   \n","130    11     13       1         0       0        1       0     0         0   \n","288    12     27       0         0       0        1       3     0         1   \n","61     13     40      20         0       1        0       0     1         0   \n","\n","     south  ...  ndurman  trcommpu  trade  services  profserv  profocc  \\\n","516      0  ...        0         0      1         0         0        0   \n","359      0  ...        0         0      0         1         0        1   \n","399      1  ...        0         0      0         0         1        1   \n","25       0  ...        0         0      0         1         0        0   \n","303      1  ...        1         0      0         0         0        0   \n","..     ...  ...      ...       ...    ...       ...       ...      ...   \n","440      1  ...        0         0      1         0         0        1   \n","242      1  ...        0         0      0         0         1        1   \n","130      1  ...        0         0      1         0         0        0   \n","288      0  ...        0         0      0         0         0        0   \n","61       0  ...        1         0      0         0         0        1   \n","\n","     clerocc  servocc  expersq  tenursq  \n","516        0        0      289        0  \n","359        0        0      121        0  \n","399        0        0     1156       25  \n","25         0        0     1369       64  \n","303        0        0     1089        4  \n","..       ...      ...      ...      ...  \n","440        0        0      484       16  \n","242        0        0      225       25  \n","130        0        0      169        1  \n","288        0        0      729        0  \n","61         0        0     1600      400  \n","\n","[106 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-f08cedc0-a29b-495d-b1cb-8af1aa54fc64\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>educ</th>\n","      <th>exper</th>\n","      <th>tenure</th>\n","      <th>nonwhite</th>\n","      <th>female</th>\n","      <th>married</th>\n","      <th>numdep</th>\n","      <th>smsa</th>\n","      <th>northcen</th>\n","      <th>south</th>\n","      <th>...</th>\n","      <th>ndurman</th>\n","      <th>trcommpu</th>\n","      <th>trade</th>\n","      <th>services</th>\n","      <th>profserv</th>\n","      <th>profocc</th>\n","      <th>clerocc</th>\n","      <th>servocc</th>\n","      <th>expersq</th>\n","      <th>tenursq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>516</th>\n","      <td>12</td>\n","      <td>17</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>289</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>359</th>\n","      <td>16</td>\n","      <td>11</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>121</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>399</th>\n","      <td>12</td>\n","      <td>34</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1156</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>11</td>\n","      <td>37</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1369</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>303</th>\n","      <td>8</td>\n","      <td>33</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1089</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>440</th>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>484</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>242</th>\n","      <td>12</td>\n","      <td>15</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>225</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>130</th>\n","      <td>11</td>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>169</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>288</th>\n","      <td>12</td>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>729</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>13</td>\n","      <td>40</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1600</td>\n","      <td>400</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>106 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f08cedc0-a29b-495d-b1cb-8af1aa54fc64')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f08cedc0-a29b-495d-b1cb-8af1aa54fc64 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f08cedc0-a29b-495d-b1cb-8af1aa54fc64');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2572bb17-8464-4f1a-8585-da0a2c44fcb5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2572bb17-8464-4f1a-8585-da0a2c44fcb5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2572bb17-8464-4f1a-8585-da0a2c44fcb5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test"}},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["preds = result.predict(sm.add_constant(X_test)) # ここにテストデータを入れる。\n","\n","display(preds.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":126},"id":"bNgi2qHUrnrJ","executionInfo":{"status":"ok","timestamp":1716903355495,"user_tz":-540,"elapsed":555,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"592bda56-a1e0-4534-c14e-f4b473af26d2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["516    1.205573\n","359    1.874398\n","399    1.966866\n","25     1.419654\n","303    1.470931\n","dtype: float64"]},"metadata":{}}]},{"cell_type":"markdown","source":["これを真の$y$と比較してみましょう。"],"metadata":{"id":"UtQFz7SWwCeY"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# numpyに変換する原因：pandasだとindexの順番で並ぶため、シャッフルされたインデックス（訓練、テストデータを作成する際にシャッフルされます）だと正しく可視化されません。\n","plt.plot(y_test.to_numpy())\n","plt.plot(preds.to_numpy())\n","plt.legend(['Real','forecast'])\n","plt.show()\n","\n","#numpyにしなかった時\n","plt.plot(y_test)\n","plt.plot(preds)\n","plt.legend(['Real','forecast'])\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":843},"id":"IyNOWhxlsU0B","executionInfo":{"status":"ok","timestamp":1716903358935,"user_tz":-540,"elapsed":1712,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"aee47ea7-e912-4705-c5ac-2a9a4a97f15c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["y_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cHXT7jzxssaK","executionInfo":{"status":"ok","timestamp":1716903360918,"user_tz":-540,"elapsed":8,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"eb36f518-9abb-4d75-f0be-3b2d417566fb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["516    0.357674\n","359    2.014903\n","399    2.390596\n","25     1.791759\n","303    1.098612\n","         ...   \n","440    2.995732\n","242    1.163151\n","130    1.609438\n","288    1.865629\n","61     2.460443\n","Name: lwage, Length: 106, dtype: float64"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["### <font color=\"Crimson\">モデル評価</font>\n","\n","　モデルの訓練が終わった後は、**モデルがどれくらい使えるのか**といった**モデル評価**が必要になります。評価方法は色々ありますが、回帰問題においてよく使われるいくつかの評価法を紹介します。\n","<br><br>\n","- **決定係数 $R^2$**\n","\n","決定係数は、モデルの**当てはまりの良さ**を示す指標です。0と1の間の値をとり、最も当てはまりの良い場合が1となります。統計学では、**訓練データ**に対する当てはまりの良さを測る指標ですが、機械学習ではテストデータに対して使うこともあります。計算式は\n","<br>\n","\\begin{eqnarray}\n","\\boldsymbol{R^2} &= 1-\\frac{\\sum_{i=1}^{N}(y_i - \\hat{y}_i)^2}{\\sum_{i=1}^{N}(y_i - \\bar{y})^2 }\n","\\end{eqnarray}\n","\n","\n","\n"],"metadata":{"id":"HW0dzCCBcrQF"}},{"cell_type":"code","source":["from sklearn.metrics import r2_score\n","r2 = r2_score(y_train, result.predict(sm.add_constant(X_train)) )\n","print(r2)"],"metadata":{"id":"jKrkBHIwmU7n","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716903363046,"user_tz":-540,"elapsed":6,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"0fd988ba-b968-48e2-e1b1-366a4e93ec5c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5583851473853734\n"]}]},{"cell_type":"markdown","source":["決定係数は通常訓練データでのモデルの適合度を評価しているので、テストデータの評価として使うことはほぼありません。"],"metadata":{"id":"XvAqMjjnOI4X"}},{"cell_type":"markdown","source":["- **平均絶対誤差 (MAE: Mean Absolute Error)**\n","\n","  観測値と予測値との差の絶対値を平均したものです。MAE が小さいほど誤差が少なく正確に予測できていることを示します。計算式は\n","\n","<br>\n","\\begin{eqnarray}\n","\\boldsymbol{MAE} &= \\frac{1}{N} \\sum_{i=1}^{N}|y_i - \\hat{y}_i|\n","\\end{eqnarray}\n"],"metadata":{"id":"45So9rLcpwQ2"}},{"cell_type":"code","source":["from sklearn.metrics import mean_absolute_error\n","mae = mean_absolute_error(y_test, result.predict(sm.add_constant(X_test)) )\n","print(mae)\n","\n","mae2 = mean_absolute_error(y_train, result.predict(sm.add_constant(X_train)) )\n","print(mae2)"],"metadata":{"id":"Fs2CQ9rRpwnp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716903365819,"user_tz":-540,"elapsed":6,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"0c66e314-3e1c-477c-9128-07423f2c1dfc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.303732843513031\n","0.26912482750621025\n"]}]},{"cell_type":"markdown","source":["- **二乗平均平方根誤差 (RMSE: Root Mean Square Error)**\n","\n","実際の値と予測値との差の二乗を平均してから、平方根をとった指標になります。計算式は\n","\n","<br>\n","\\begin{eqnarray}\n","\\boldsymbol{RMSE} &= \\sqrt{\\frac{1}{N} \\sum_{i=1}^{N}(y_i - \\hat{y}_i)^2}\n","\\end{eqnarray}\n","\n","\n","です。**MAE**との違いは、残差に対する感度の違いにあります。例えば、データが2つあって、残差が${\\hat{u}_1}=100$、${\\hat{u}_2}=200$の時、MAEは$\\frac{100+200}{2}=150$で、RMSEは$\\sqrt{ \\frac {100^2 + 200^2} {2} }=158.114$になり、後者が前者よりも損失を大きく評価しています。\n"],"metadata":{"id":"eCHZuNAzmVRP"}},{"cell_type":"code","source":["# sklearnは二乗平均誤差MSEしかないので、これを用いります。#外れに対して大きく評価\n","from sklearn.metrics import mean_squared_error\n","rmse = np.sqrt(mean_squared_error(y_test, result.predict(sm.add_constant(X_test)) ))\n","print(rmse)"],"metadata":{"id":"X3ERvuJmmVov","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716903367859,"user_tz":-540,"elapsed":5,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"7abe10ca-e741-4e03-c044-ac5bfb377b63"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.384892590068516\n"]}]},{"cell_type":"markdown","source":["## - **<font color='crimson'>6.3 Lasso回帰</font>**\n","　ここで、モデルの複雑さにペナルティーを課す**Lasso回帰**を紹介します。**Lasso回帰**では、モデル自体は通常の回帰モデルと同じですが、式(2.15)で示した損失関数が、\n","<br><br>\n","\\begin{eqnarray}\n","\\boldsymbol{\\hat{Q}_{Lasso} } = \\sum_{i=1}^{N}(y_i-\\hat{\\beta}_i x_i)^2 + \\alpha \\sum_{k=1}^{K}|\\beta_k|\n","\\end{eqnarray}\n","<br>\n","と修正されます。\n","\n","- $K$は、変数の数です。\n","- $\\alpha$は、分析者が決める罰則係数で、大きくすれば、変数の推定係数が大きくなるほどペナルティーが増えます。$\\alpha=0$だと、通常の回帰分析に帰着します。\n","\n","　ペナルティタームである$\\alpha \\sum_{k=1}^{K}|\\beta_k|$は、正則化項と呼ばれ、変数の数と係数の大きさにより損失が大きくなります。したがって、通常の回帰分析の損失関数では考慮できなかったモデルの複雑さを考慮することができます。この損失関数を最小化するように係数を推定すると、推定値が0なりやすいという特徴があります。つまり、Lasso回帰で不要な変数の係数が0になりやすいことは、変数選択することとと同じことになり、過学習への対策となります。\n","\n","　直感的には、\n","<br><br>\n","\\begin{eqnarray}\n","\\boldsymbol{損失関数} = 訓練データにおける残差二乗和 + \\alpha \\times モデルの複雑度\n","\\end{eqnarray}\n","<br>\n","と考えればよいと思います。ここで、$\\alpha$をコントロールすることで、損失関数を訓練残差二乗和を重視するか、モデルの複雑度を重視するかを調整することができます。\n","\n","　簡単にまとめると、\n","\n","> <font color='crimson'>**損失関数の特徴** </font>\n","\n","目的変数と無関係な変数の係数を0に推定しやすくすることで、変数選択を行うことができる。\n","\n","> <font color='crimson'>**有効な場合**</font>\n","\n","説明変数が多すぎる場合（数千に及ぶ時など）、Lasso回帰で変数選択を行うことができます。\n","\n","> <font color='crimson'>**statsmodelによる応用**</font>\n","\n","`statsmodel`を用いれば、LassoやRidge回帰は簡単に使うことができます。"],"metadata":{"id":"cmFHsudGpYIB"}},{"cell_type":"markdown","source":["### <font color=\"Crimson\">Lasso回帰の流れ</font>\n"],"metadata":{"id":"6V6IRh7eSOw7"}},{"cell_type":"markdown","source":["まず、データの標準化を行います。"],"metadata":{"id":"YzS0RIWCl_pv"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","norm = StandardScaler() # 標準化関数の定義\n","normX = X_train.copy()\n","normX[X_train.columns] = norm.fit_transform(X_train) # 標準化を行います。\n","display(normX)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"4xi2Y9AEmCb2","executionInfo":{"status":"ok","timestamp":1716903371651,"user_tz":-540,"elapsed":11,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"59cfec82-85ff-479b-dd82-1a72848b8975"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["         educ     exper    tenure  nonwhite    female   married    numdep  \\\n","215  0.539329  0.872150  2.722642 -0.315399 -0.985815  0.800391 -0.056060   \n","7    1.955069 -0.153909  0.286899 -0.315399 -0.985815 -1.249390 -0.840894   \n","267  0.185394  1.458469  1.719689 -0.315399  1.014389  0.800391 -0.840894   \n","220 -1.584280  1.385179  1.433131 -0.315399  1.014389  0.800391 -0.840894   \n","320 -0.876410  1.238599  1.003294 -0.315399 -0.985815  0.800391 -0.840894   \n","..        ...       ...       ...       ...       ...       ...       ...   \n","124 -0.168540  0.872150 -0.716054 -0.315399  1.014389 -1.249390 -0.056060   \n","370 -0.876410 -1.106677 -0.572775 -0.315399  1.014389 -1.249390 -0.056060   \n","321 -0.168540 -0.666938 -0.716054 -0.315399  1.014389  0.800391  0.728775   \n","126  1.247199 -0.007329 -0.286217 -0.315399  1.014389  0.800391  0.728775   \n","266 -1.584280  2.337947  0.143620 -0.315399  1.014389 -1.249390 -0.056060   \n","\n","         smsa  northcen     south  ...   ndurman  trcommpu     trade  \\\n","215  0.606694  1.732051 -0.729964  ... -0.354972 -0.199007 -0.636146   \n","7    0.606694 -0.577350 -0.729964  ... -0.354972 -0.199007  1.571965   \n","267  0.606694 -0.577350 -0.729964  ... -0.354972 -0.199007 -0.636146   \n","220 -1.648276 -0.577350 -0.729964  ... -0.354972 -0.199007 -0.636146   \n","320 -1.648276  1.732051 -0.729964  ... -0.354972 -0.199007 -0.636146   \n","..        ...       ...       ...  ...       ...       ...       ...   \n","124  0.606694 -0.577350  1.369932  ... -0.354972 -0.199007 -0.636146   \n","370  0.606694 -0.577350  1.369932  ... -0.354972 -0.199007  1.571965   \n","321 -1.648276  1.732051 -0.729964  ... -0.354972 -0.199007  1.571965   \n","126 -1.648276 -0.577350  1.369932  ... -0.354972 -0.199007 -0.636146   \n","266 -1.648276 -0.577350 -0.729964  ...  2.817121 -0.199007 -0.636146   \n","\n","     services  profserv   profocc   clerocc   servocc   expersq   tenursq  \n","215 -0.342084 -0.595683  1.334712 -0.458666 -0.420084  0.584210  2.857184  \n","7   -0.342084 -0.595683  1.334712 -0.458666 -0.420084 -0.408766 -0.140428  \n","267 -0.342084  1.678744  1.334712 -0.458666 -0.420084  1.435332  1.224708  \n","220 -0.342084  1.678744 -0.749225  2.180235 -0.420084  1.317658  0.860672  \n","320 -0.342084 -0.595683 -0.749225 -0.458666 -0.420084  1.091981  0.399939  \n","..        ...       ...       ...       ...       ...       ...       ...  \n","124 -0.342084 -0.595683 -0.749225  2.180235 -0.420084  0.584210 -0.419143  \n","370 -0.342084 -0.595683 -0.749225  2.180235 -0.420084 -0.765012 -0.413455  \n","321 -0.342084 -0.595683  1.334712 -0.458666 -0.420084 -0.668293 -0.419143  \n","126 -0.342084  1.678744  1.334712 -0.458666 -0.420084 -0.305599 -0.367950  \n","266 -0.342084 -0.595683 -0.749225 -0.458666 -0.420084  3.098888 -0.214372  \n","\n","[420 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-e79e9b4d-4082-4d0d-8d19-8af881caf309\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>educ</th>\n","      <th>exper</th>\n","      <th>tenure</th>\n","      <th>nonwhite</th>\n","      <th>female</th>\n","      <th>married</th>\n","      <th>numdep</th>\n","      <th>smsa</th>\n","      <th>northcen</th>\n","      <th>south</th>\n","      <th>...</th>\n","      <th>ndurman</th>\n","      <th>trcommpu</th>\n","      <th>trade</th>\n","      <th>services</th>\n","      <th>profserv</th>\n","      <th>profocc</th>\n","      <th>clerocc</th>\n","      <th>servocc</th>\n","      <th>expersq</th>\n","      <th>tenursq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>215</th>\n","      <td>0.539329</td>\n","      <td>0.872150</td>\n","      <td>2.722642</td>\n","      <td>-0.315399</td>\n","      <td>-0.985815</td>\n","      <td>0.800391</td>\n","      <td>-0.056060</td>\n","      <td>0.606694</td>\n","      <td>1.732051</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>0.584210</td>\n","      <td>2.857184</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1.955069</td>\n","      <td>-0.153909</td>\n","      <td>0.286899</td>\n","      <td>-0.315399</td>\n","      <td>-0.985815</td>\n","      <td>-1.249390</td>\n","      <td>-0.840894</td>\n","      <td>0.606694</td>\n","      <td>-0.577350</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>1.571965</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>-0.408766</td>\n","      <td>-0.140428</td>\n","    </tr>\n","    <tr>\n","      <th>267</th>\n","      <td>0.185394</td>\n","      <td>1.458469</td>\n","      <td>1.719689</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>0.800391</td>\n","      <td>-0.840894</td>\n","      <td>0.606694</td>\n","      <td>-0.577350</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>1.678744</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>1.435332</td>\n","      <td>1.224708</td>\n","    </tr>\n","    <tr>\n","      <th>220</th>\n","      <td>-1.584280</td>\n","      <td>1.385179</td>\n","      <td>1.433131</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>0.800391</td>\n","      <td>-0.840894</td>\n","      <td>-1.648276</td>\n","      <td>-0.577350</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>1.678744</td>\n","      <td>-0.749225</td>\n","      <td>2.180235</td>\n","      <td>-0.420084</td>\n","      <td>1.317658</td>\n","      <td>0.860672</td>\n","    </tr>\n","    <tr>\n","      <th>320</th>\n","      <td>-0.876410</td>\n","      <td>1.238599</td>\n","      <td>1.003294</td>\n","      <td>-0.315399</td>\n","      <td>-0.985815</td>\n","      <td>0.800391</td>\n","      <td>-0.840894</td>\n","      <td>-1.648276</td>\n","      <td>1.732051</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>-0.749225</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>1.091981</td>\n","      <td>0.399939</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>124</th>\n","      <td>-0.168540</td>\n","      <td>0.872150</td>\n","      <td>-0.716054</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>-1.249390</td>\n","      <td>-0.056060</td>\n","      <td>0.606694</td>\n","      <td>-0.577350</td>\n","      <td>1.369932</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>-0.749225</td>\n","      <td>2.180235</td>\n","      <td>-0.420084</td>\n","      <td>0.584210</td>\n","      <td>-0.419143</td>\n","    </tr>\n","    <tr>\n","      <th>370</th>\n","      <td>-0.876410</td>\n","      <td>-1.106677</td>\n","      <td>-0.572775</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>-1.249390</td>\n","      <td>-0.056060</td>\n","      <td>0.606694</td>\n","      <td>-0.577350</td>\n","      <td>1.369932</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>1.571965</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>-0.749225</td>\n","      <td>2.180235</td>\n","      <td>-0.420084</td>\n","      <td>-0.765012</td>\n","      <td>-0.413455</td>\n","    </tr>\n","    <tr>\n","      <th>321</th>\n","      <td>-0.168540</td>\n","      <td>-0.666938</td>\n","      <td>-0.716054</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>0.800391</td>\n","      <td>0.728775</td>\n","      <td>-1.648276</td>\n","      <td>1.732051</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>1.571965</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>-0.668293</td>\n","      <td>-0.419143</td>\n","    </tr>\n","    <tr>\n","      <th>126</th>\n","      <td>1.247199</td>\n","      <td>-0.007329</td>\n","      <td>-0.286217</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>0.800391</td>\n","      <td>0.728775</td>\n","      <td>-1.648276</td>\n","      <td>-0.577350</td>\n","      <td>1.369932</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>1.678744</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>-0.305599</td>\n","      <td>-0.367950</td>\n","    </tr>\n","    <tr>\n","      <th>266</th>\n","      <td>-1.584280</td>\n","      <td>2.337947</td>\n","      <td>0.143620</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>-1.249390</td>\n","      <td>-0.056060</td>\n","      <td>-1.648276</td>\n","      <td>-0.577350</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>2.817121</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>-0.749225</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>3.098888</td>\n","      <td>-0.214372</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>420 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e79e9b4d-4082-4d0d-8d19-8af881caf309')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e79e9b4d-4082-4d0d-8d19-8af881caf309 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e79e9b4d-4082-4d0d-8d19-8af881caf309');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-29716e97-de3b-4a17-8330-e0d29894d87f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29716e97-de3b-4a17-8330-e0d29894d87f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-29716e97-de3b-4a17-8330-e0d29894d87f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"normX"}},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","\n","norm_ = MinMaxScaler() # 標準化関数の定義\n","norm_X = X_train.copy()\n","norm_X[X_train.columns] = norm.fit_transform(X_train) # 標準化を行います。\n","display(norm_X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"ASJlmiNB5rwI","executionInfo":{"status":"ok","timestamp":1716903372969,"user_tz":-540,"elapsed":11,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"bf3e0db1-7334-4d2d-f492-15bc29fe2efd"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["         educ     exper    tenure  nonwhite    female   married    numdep  \\\n","215  0.539329  0.872150  2.722642 -0.315399 -0.985815  0.800391 -0.056060   \n","7    1.955069 -0.153909  0.286899 -0.315399 -0.985815 -1.249390 -0.840894   \n","267  0.185394  1.458469  1.719689 -0.315399  1.014389  0.800391 -0.840894   \n","220 -1.584280  1.385179  1.433131 -0.315399  1.014389  0.800391 -0.840894   \n","320 -0.876410  1.238599  1.003294 -0.315399 -0.985815  0.800391 -0.840894   \n","..        ...       ...       ...       ...       ...       ...       ...   \n","124 -0.168540  0.872150 -0.716054 -0.315399  1.014389 -1.249390 -0.056060   \n","370 -0.876410 -1.106677 -0.572775 -0.315399  1.014389 -1.249390 -0.056060   \n","321 -0.168540 -0.666938 -0.716054 -0.315399  1.014389  0.800391  0.728775   \n","126  1.247199 -0.007329 -0.286217 -0.315399  1.014389  0.800391  0.728775   \n","266 -1.584280  2.337947  0.143620 -0.315399  1.014389 -1.249390 -0.056060   \n","\n","         smsa  northcen     south  ...   ndurman  trcommpu     trade  \\\n","215  0.606694  1.732051 -0.729964  ... -0.354972 -0.199007 -0.636146   \n","7    0.606694 -0.577350 -0.729964  ... -0.354972 -0.199007  1.571965   \n","267  0.606694 -0.577350 -0.729964  ... -0.354972 -0.199007 -0.636146   \n","220 -1.648276 -0.577350 -0.729964  ... -0.354972 -0.199007 -0.636146   \n","320 -1.648276  1.732051 -0.729964  ... -0.354972 -0.199007 -0.636146   \n","..        ...       ...       ...  ...       ...       ...       ...   \n","124  0.606694 -0.577350  1.369932  ... -0.354972 -0.199007 -0.636146   \n","370  0.606694 -0.577350  1.369932  ... -0.354972 -0.199007  1.571965   \n","321 -1.648276  1.732051 -0.729964  ... -0.354972 -0.199007  1.571965   \n","126 -1.648276 -0.577350  1.369932  ... -0.354972 -0.199007 -0.636146   \n","266 -1.648276 -0.577350 -0.729964  ...  2.817121 -0.199007 -0.636146   \n","\n","     services  profserv   profocc   clerocc   servocc   expersq   tenursq  \n","215 -0.342084 -0.595683  1.334712 -0.458666 -0.420084  0.584210  2.857184  \n","7   -0.342084 -0.595683  1.334712 -0.458666 -0.420084 -0.408766 -0.140428  \n","267 -0.342084  1.678744  1.334712 -0.458666 -0.420084  1.435332  1.224708  \n","220 -0.342084  1.678744 -0.749225  2.180235 -0.420084  1.317658  0.860672  \n","320 -0.342084 -0.595683 -0.749225 -0.458666 -0.420084  1.091981  0.399939  \n","..        ...       ...       ...       ...       ...       ...       ...  \n","124 -0.342084 -0.595683 -0.749225  2.180235 -0.420084  0.584210 -0.419143  \n","370 -0.342084 -0.595683 -0.749225  2.180235 -0.420084 -0.765012 -0.413455  \n","321 -0.342084 -0.595683  1.334712 -0.458666 -0.420084 -0.668293 -0.419143  \n","126 -0.342084  1.678744  1.334712 -0.458666 -0.420084 -0.305599 -0.367950  \n","266 -0.342084 -0.595683 -0.749225 -0.458666 -0.420084  3.098888 -0.214372  \n","\n","[420 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-452c892e-c0a6-4209-a03a-d958f4690061\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>educ</th>\n","      <th>exper</th>\n","      <th>tenure</th>\n","      <th>nonwhite</th>\n","      <th>female</th>\n","      <th>married</th>\n","      <th>numdep</th>\n","      <th>smsa</th>\n","      <th>northcen</th>\n","      <th>south</th>\n","      <th>...</th>\n","      <th>ndurman</th>\n","      <th>trcommpu</th>\n","      <th>trade</th>\n","      <th>services</th>\n","      <th>profserv</th>\n","      <th>profocc</th>\n","      <th>clerocc</th>\n","      <th>servocc</th>\n","      <th>expersq</th>\n","      <th>tenursq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>215</th>\n","      <td>0.539329</td>\n","      <td>0.872150</td>\n","      <td>2.722642</td>\n","      <td>-0.315399</td>\n","      <td>-0.985815</td>\n","      <td>0.800391</td>\n","      <td>-0.056060</td>\n","      <td>0.606694</td>\n","      <td>1.732051</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>0.584210</td>\n","      <td>2.857184</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1.955069</td>\n","      <td>-0.153909</td>\n","      <td>0.286899</td>\n","      <td>-0.315399</td>\n","      <td>-0.985815</td>\n","      <td>-1.249390</td>\n","      <td>-0.840894</td>\n","      <td>0.606694</td>\n","      <td>-0.577350</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>1.571965</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>-0.408766</td>\n","      <td>-0.140428</td>\n","    </tr>\n","    <tr>\n","      <th>267</th>\n","      <td>0.185394</td>\n","      <td>1.458469</td>\n","      <td>1.719689</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>0.800391</td>\n","      <td>-0.840894</td>\n","      <td>0.606694</td>\n","      <td>-0.577350</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>1.678744</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>1.435332</td>\n","      <td>1.224708</td>\n","    </tr>\n","    <tr>\n","      <th>220</th>\n","      <td>-1.584280</td>\n","      <td>1.385179</td>\n","      <td>1.433131</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>0.800391</td>\n","      <td>-0.840894</td>\n","      <td>-1.648276</td>\n","      <td>-0.577350</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>1.678744</td>\n","      <td>-0.749225</td>\n","      <td>2.180235</td>\n","      <td>-0.420084</td>\n","      <td>1.317658</td>\n","      <td>0.860672</td>\n","    </tr>\n","    <tr>\n","      <th>320</th>\n","      <td>-0.876410</td>\n","      <td>1.238599</td>\n","      <td>1.003294</td>\n","      <td>-0.315399</td>\n","      <td>-0.985815</td>\n","      <td>0.800391</td>\n","      <td>-0.840894</td>\n","      <td>-1.648276</td>\n","      <td>1.732051</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>-0.749225</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>1.091981</td>\n","      <td>0.399939</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>124</th>\n","      <td>-0.168540</td>\n","      <td>0.872150</td>\n","      <td>-0.716054</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>-1.249390</td>\n","      <td>-0.056060</td>\n","      <td>0.606694</td>\n","      <td>-0.577350</td>\n","      <td>1.369932</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>-0.749225</td>\n","      <td>2.180235</td>\n","      <td>-0.420084</td>\n","      <td>0.584210</td>\n","      <td>-0.419143</td>\n","    </tr>\n","    <tr>\n","      <th>370</th>\n","      <td>-0.876410</td>\n","      <td>-1.106677</td>\n","      <td>-0.572775</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>-1.249390</td>\n","      <td>-0.056060</td>\n","      <td>0.606694</td>\n","      <td>-0.577350</td>\n","      <td>1.369932</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>1.571965</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>-0.749225</td>\n","      <td>2.180235</td>\n","      <td>-0.420084</td>\n","      <td>-0.765012</td>\n","      <td>-0.413455</td>\n","    </tr>\n","    <tr>\n","      <th>321</th>\n","      <td>-0.168540</td>\n","      <td>-0.666938</td>\n","      <td>-0.716054</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>0.800391</td>\n","      <td>0.728775</td>\n","      <td>-1.648276</td>\n","      <td>1.732051</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>1.571965</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>-0.668293</td>\n","      <td>-0.419143</td>\n","    </tr>\n","    <tr>\n","      <th>126</th>\n","      <td>1.247199</td>\n","      <td>-0.007329</td>\n","      <td>-0.286217</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>0.800391</td>\n","      <td>0.728775</td>\n","      <td>-1.648276</td>\n","      <td>-0.577350</td>\n","      <td>1.369932</td>\n","      <td>...</td>\n","      <td>-0.354972</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>1.678744</td>\n","      <td>1.334712</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>-0.305599</td>\n","      <td>-0.367950</td>\n","    </tr>\n","    <tr>\n","      <th>266</th>\n","      <td>-1.584280</td>\n","      <td>2.337947</td>\n","      <td>0.143620</td>\n","      <td>-0.315399</td>\n","      <td>1.014389</td>\n","      <td>-1.249390</td>\n","      <td>-0.056060</td>\n","      <td>-1.648276</td>\n","      <td>-0.577350</td>\n","      <td>-0.729964</td>\n","      <td>...</td>\n","      <td>2.817121</td>\n","      <td>-0.199007</td>\n","      <td>-0.636146</td>\n","      <td>-0.342084</td>\n","      <td>-0.595683</td>\n","      <td>-0.749225</td>\n","      <td>-0.458666</td>\n","      <td>-0.420084</td>\n","      <td>3.098888</td>\n","      <td>-0.214372</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>420 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-452c892e-c0a6-4209-a03a-d958f4690061')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-452c892e-c0a6-4209-a03a-d958f4690061 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-452c892e-c0a6-4209-a03a-d958f4690061');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3fb01a49-5499-451c-831d-f6a0bbe8b556\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3fb01a49-5499-451c-831d-f6a0bbe8b556')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3fb01a49-5499-451c-831d-f6a0bbe8b556 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"norm_X"}},"metadata":{}}]},{"cell_type":"code","source":["import statsmodels.api as sm # モジュールの読み込み\n","\n","# ここまでは同じ\n","model = sm.OLS(y_train, sm.add_constant(normX)) # Y,　Xを入力 #重回帰分析\n","\n","#results = model.fit()\n","\n","# ここでLasso\n","result2 = model.fit_regularized(\n","                    method='elastic_net',\n","                    alpha=0.01, #a=0.01で計算\n","                    L1_wt=1\n","                    )\n","b= result2.params\n","print(b) #Lassoで0になっても、線形的に関係がないだけで、非線形の場合は分からない"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kmbG8ZCcQylx","executionInfo":{"status":"ok","timestamp":1716903373796,"user_tz":-540,"elapsed":439,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"538d2d2d-acc6-4eea-ca3f-d6b4f753d7a6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["const       1.618390\n","educ        0.135760\n","exper       0.068091\n","tenure      0.091880\n","nonwhite    0.000000\n","female     -0.117979\n","married     0.040873\n","numdep      0.000000\n","smsa        0.058684\n","northcen   -0.012008\n","south      -0.012531\n","west        0.024001\n","construc    0.000000\n","ndurman     0.000000\n","trcommpu    0.000000\n","trade      -0.110049\n","services   -0.076006\n","profserv    0.000000\n","profocc     0.101676\n","clerocc     0.000000\n","servocc    -0.048881\n","expersq    -0.067261\n","tenursq    -0.005502\n","dtype: float64\n"]}]},{"cell_type":"markdown","source":["ここで、\n","\n","- <font color='crimson'>`method='elastic_net'`</font>: LassoもしくはRidge回帰を使用します。\n","\n","- <font color='crimson'>`alpha=0.01`</font>: 罰則項$\\alpha$、大きいほど多くの偏回帰係数が0に近づくようになります。\n","\n","- <font color='crimson'>`L1_wt=1`</font>: 0であれば、Ridge、1であればLassoになります（間をとることも可能です。）\n"],"metadata":{"id":"PJGY4U6qXrgb"}},{"cell_type":"markdown","source":["`result2.params`で回帰係数のデータを獲得できます。"],"metadata":{"id":"D9pPcMoyY9d4"}},{"cell_type":"markdown","source":["### <font color=\"Crimson\">変数選択</font>\n"],"metadata":{"id":"jiZrZlCSSE9y"}},{"cell_type":"markdown","source":["ここで、回帰係数が0以上の項目だけ選び、線形回帰に当てはめるとする場合、前回学んだ`pandas`の知識が使えます。"],"metadata":{"id":"qBlMV_w2ZF8X"}},{"cell_type":"code","source":["b[b!=0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3cIg29JIib_W","executionInfo":{"status":"ok","timestamp":1716903377281,"user_tz":-540,"elapsed":4,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"ca1ac612-5ed3-453f-ac11-5a44dfa52a84"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["const       1.618390\n","educ        0.135760\n","exper       0.068091\n","tenure      0.091880\n","female     -0.117979\n","married     0.040873\n","smsa        0.058684\n","northcen   -0.012008\n","south      -0.012531\n","west        0.024001\n","trade      -0.110049\n","services   -0.076006\n","profocc     0.101676\n","servocc    -0.048881\n","expersq    -0.067261\n","tenursq    -0.005502\n","dtype: float64"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["# 回帰係数が0ではない変数のみ選択\n","newb = b[b!=0].drop('const') # 切片項は捨てる\n","print(newb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OPDVAQw_ZV3W","executionInfo":{"status":"ok","timestamp":1716903378415,"user_tz":-540,"elapsed":5,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"d2a4641a-8c92-4039-f5ac-95d541b75c2f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["educ        0.135760\n","exper       0.068091\n","tenure      0.091880\n","female     -0.117979\n","married     0.040873\n","smsa        0.058684\n","northcen   -0.012008\n","south      -0.012531\n","west        0.024001\n","trade      -0.110049\n","services   -0.076006\n","profocc     0.101676\n","servocc    -0.048881\n","expersq    -0.067261\n","tenursq    -0.005502\n","dtype: float64\n"]}]},{"cell_type":"code","source":["# その列名を取得\n","display(newb.index)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":90},"id":"14Wu73l-XrOl","executionInfo":{"status":"ok","timestamp":1716903379920,"user_tz":-540,"elapsed":12,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"b069b163-b61e-43fa-bd5b-4122ec77245c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Index(['educ', 'exper', 'tenure', 'female', 'married', 'smsa', 'northcen',\n","       'south', 'west', 'trade', 'services', 'profocc', 'servocc', 'expersq',\n","       'tenursq'],\n","      dtype='object')"]},"metadata":{}}]},{"cell_type":"markdown","source":["選ばれた変数で線形回帰を回し、モデル評価を行います。"],"metadata":{"id":"HhoXiQH9ZpUd"}},{"cell_type":"code","source":[" model = sm.OLS(y_train, sm.add_constant(X_train[newb.index])) # Y,　Xを入力\n","\n"," result3 = model.fit()\n"," result3.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":772},"id":"BHG-tUEvZmOW","executionInfo":{"status":"ok","timestamp":1716903382202,"user_tz":-540,"elapsed":9,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"01642c92-8baa-47c3-e5b2-fb1e8f2b1515"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:                  lwage   R-squared:                       0.552\n","Model:                            OLS   Adj. R-squared:                  0.536\n","Method:                 Least Squares   F-statistic:                     33.23\n","Date:                Tue, 28 May 2024   Prob (F-statistic):           3.89e-61\n","Time:                        13:36:21   Log-Likelihood:                -161.11\n","No. Observations:                 420   AIC:                             354.2\n","Df Residuals:                     404   BIC:                             418.9\n","Df Model:                          15                                         \n","Covariance Type:            nonrobust                                         \n","==============================================================================\n","                 coef    std err          t      P>|t|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const          0.8576      0.118      7.269      0.000       0.626       1.090\n","educ           0.0469      0.008      5.763      0.000       0.031       0.063\n","exper          0.0244      0.005      4.491      0.000       0.014       0.035\n","tenure         0.0289      0.008      3.674      0.000       0.013       0.044\n","female        -0.2510      0.037     -6.705      0.000      -0.325      -0.177\n","married        0.0359      0.042      0.860      0.390      -0.046       0.118\n","smsa           0.1535      0.042      3.676      0.000       0.071       0.236\n","northcen      -0.0682      0.052     -1.312      0.190      -0.171       0.034\n","south         -0.0716      0.050     -1.444      0.149      -0.169       0.026\n","west           0.0431      0.056      0.763      0.446      -0.068       0.154\n","trade         -0.2581      0.041     -6.231      0.000      -0.340      -0.177\n","services      -0.2756      0.062     -4.468      0.000      -0.397      -0.154\n","profocc        0.2050      0.046      4.411      0.000       0.114       0.296\n","servocc       -0.1233      0.054     -2.277      0.023      -0.230      -0.017\n","expersq       -0.0005      0.000     -4.629      0.000      -0.001      -0.000\n","tenursq       -0.0007      0.000     -2.348      0.019      -0.001      -0.000\n","==============================================================================\n","Omnibus:                       15.224   Durbin-Watson:                   1.993\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):               34.660\n","Skew:                           0.007   Prob(JB):                     2.98e-08\n","Kurtosis:                       4.407   Cond. No.                     5.51e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","[2] The condition number is large, 5.51e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>OLS Regression Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>          <td>lwage</td>      <th>  R-squared:         </th> <td>   0.552</td>\n","</tr>\n","<tr>\n","  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.536</td>\n","</tr>\n","<tr>\n","  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   33.23</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>             <td>Tue, 28 May 2024</td> <th>  Prob (F-statistic):</th> <td>3.89e-61</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                 <td>13:36:21</td>     <th>  Log-Likelihood:    </th> <td> -161.11</td>\n","</tr>\n","<tr>\n","  <th>No. Observations:</th>      <td>   420</td>      <th>  AIC:               </th> <td>   354.2</td>\n","</tr>\n","<tr>\n","  <th>Df Residuals:</th>          <td>   404</td>      <th>  BIC:               </th> <td>   418.9</td>\n","</tr>\n","<tr>\n","  <th>Df Model:</th>              <td>    15</td>      <th>                     </th>     <td> </td>   \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","      <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>const</th>    <td>    0.8576</td> <td>    0.118</td> <td>    7.269</td> <td> 0.000</td> <td>    0.626</td> <td>    1.090</td>\n","</tr>\n","<tr>\n","  <th>educ</th>     <td>    0.0469</td> <td>    0.008</td> <td>    5.763</td> <td> 0.000</td> <td>    0.031</td> <td>    0.063</td>\n","</tr>\n","<tr>\n","  <th>exper</th>    <td>    0.0244</td> <td>    0.005</td> <td>    4.491</td> <td> 0.000</td> <td>    0.014</td> <td>    0.035</td>\n","</tr>\n","<tr>\n","  <th>tenure</th>   <td>    0.0289</td> <td>    0.008</td> <td>    3.674</td> <td> 0.000</td> <td>    0.013</td> <td>    0.044</td>\n","</tr>\n","<tr>\n","  <th>female</th>   <td>   -0.2510</td> <td>    0.037</td> <td>   -6.705</td> <td> 0.000</td> <td>   -0.325</td> <td>   -0.177</td>\n","</tr>\n","<tr>\n","  <th>married</th>  <td>    0.0359</td> <td>    0.042</td> <td>    0.860</td> <td> 0.390</td> <td>   -0.046</td> <td>    0.118</td>\n","</tr>\n","<tr>\n","  <th>smsa</th>     <td>    0.1535</td> <td>    0.042</td> <td>    3.676</td> <td> 0.000</td> <td>    0.071</td> <td>    0.236</td>\n","</tr>\n","<tr>\n","  <th>northcen</th> <td>   -0.0682</td> <td>    0.052</td> <td>   -1.312</td> <td> 0.190</td> <td>   -0.171</td> <td>    0.034</td>\n","</tr>\n","<tr>\n","  <th>south</th>    <td>   -0.0716</td> <td>    0.050</td> <td>   -1.444</td> <td> 0.149</td> <td>   -0.169</td> <td>    0.026</td>\n","</tr>\n","<tr>\n","  <th>west</th>     <td>    0.0431</td> <td>    0.056</td> <td>    0.763</td> <td> 0.446</td> <td>   -0.068</td> <td>    0.154</td>\n","</tr>\n","<tr>\n","  <th>trade</th>    <td>   -0.2581</td> <td>    0.041</td> <td>   -6.231</td> <td> 0.000</td> <td>   -0.340</td> <td>   -0.177</td>\n","</tr>\n","<tr>\n","  <th>services</th> <td>   -0.2756</td> <td>    0.062</td> <td>   -4.468</td> <td> 0.000</td> <td>   -0.397</td> <td>   -0.154</td>\n","</tr>\n","<tr>\n","  <th>profocc</th>  <td>    0.2050</td> <td>    0.046</td> <td>    4.411</td> <td> 0.000</td> <td>    0.114</td> <td>    0.296</td>\n","</tr>\n","<tr>\n","  <th>servocc</th>  <td>   -0.1233</td> <td>    0.054</td> <td>   -2.277</td> <td> 0.023</td> <td>   -0.230</td> <td>   -0.017</td>\n","</tr>\n","<tr>\n","  <th>expersq</th>  <td>   -0.0005</td> <td>    0.000</td> <td>   -4.629</td> <td> 0.000</td> <td>   -0.001</td> <td>   -0.000</td>\n","</tr>\n","<tr>\n","  <th>tenursq</th>  <td>   -0.0007</td> <td>    0.000</td> <td>   -2.348</td> <td> 0.019</td> <td>   -0.001</td> <td>   -0.000</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Omnibus:</th>       <td>15.224</td> <th>  Durbin-Watson:     </th> <td>   1.993</td>\n","</tr>\n","<tr>\n","  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  34.660</td>\n","</tr>\n","<tr>\n","  <th>Skew:</th>          <td> 0.007</td> <th>  Prob(JB):          </th> <td>2.98e-08</td>\n","</tr>\n","<tr>\n","  <th>Kurtosis:</th>      <td> 4.407</td> <th>  Cond. No.          </th> <td>5.51e+03</td>\n","</tr>\n","</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 5.51e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems."],"text/latex":"\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    &      lwage       & \\textbf{  R-squared:         } &     0.552   \\\\\n\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.536   \\\\\n\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     33.23   \\\\\n\\textbf{Date:}             & Tue, 28 May 2024 & \\textbf{  Prob (F-statistic):} &  3.89e-61   \\\\\n\\textbf{Time:}             &     13:36:21     & \\textbf{  Log-Likelihood:    } &   -161.11   \\\\\n\\textbf{No. Observations:} &         420      & \\textbf{  AIC:               } &     354.2   \\\\\n\\textbf{Df Residuals:}     &         404      & \\textbf{  BIC:               } &     418.9   \\\\\n\\textbf{Df Model:}         &          15      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                  & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const}    &       0.8576  &        0.118     &     7.269  &         0.000        &        0.626    &        1.090     \\\\\n\\textbf{educ}     &       0.0469  &        0.008     &     5.763  &         0.000        &        0.031    &        0.063     \\\\\n\\textbf{exper}    &       0.0244  &        0.005     &     4.491  &         0.000        &        0.014    &        0.035     \\\\\n\\textbf{tenure}   &       0.0289  &        0.008     &     3.674  &         0.000        &        0.013    &        0.044     \\\\\n\\textbf{female}   &      -0.2510  &        0.037     &    -6.705  &         0.000        &       -0.325    &       -0.177     \\\\\n\\textbf{married}  &       0.0359  &        0.042     &     0.860  &         0.390        &       -0.046    &        0.118     \\\\\n\\textbf{smsa}     &       0.1535  &        0.042     &     3.676  &         0.000        &        0.071    &        0.236     \\\\\n\\textbf{northcen} &      -0.0682  &        0.052     &    -1.312  &         0.190        &       -0.171    &        0.034     \\\\\n\\textbf{south}    &      -0.0716  &        0.050     &    -1.444  &         0.149        &       -0.169    &        0.026     \\\\\n\\textbf{west}     &       0.0431  &        0.056     &     0.763  &         0.446        &       -0.068    &        0.154     \\\\\n\\textbf{trade}    &      -0.2581  &        0.041     &    -6.231  &         0.000        &       -0.340    &       -0.177     \\\\\n\\textbf{services} &      -0.2756  &        0.062     &    -4.468  &         0.000        &       -0.397    &       -0.154     \\\\\n\\textbf{profocc}  &       0.2050  &        0.046     &     4.411  &         0.000        &        0.114    &        0.296     \\\\\n\\textbf{servocc}  &      -0.1233  &        0.054     &    -2.277  &         0.023        &       -0.230    &       -0.017     \\\\\n\\textbf{expersq}  &      -0.0005  &        0.000     &    -4.629  &         0.000        &       -0.001    &       -0.000     \\\\\n\\textbf{tenursq}  &      -0.0007  &        0.000     &    -2.348  &         0.019        &       -0.001    &       -0.000     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 15.224 & \\textbf{  Durbin-Watson:     } &    1.993  \\\\\n\\textbf{Prob(Omnibus):} &  0.000 & \\textbf{  Jarque-Bera (JB):  } &   34.660  \\\\\n\\textbf{Skew:}          &  0.007 & \\textbf{  Prob(JB):          } & 2.98e-08  \\\\\n\\textbf{Kurtosis:}      &  4.407 & \\textbf{  Cond. No.          } & 5.51e+03  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. \\newline\n [2] The condition number is large, 5.51e+03. This might indicate that there are \\newline\n strong multicollinearity or other numerical problems."},"metadata":{},"execution_count":40}]},{"cell_type":"markdown","source":["テストデータを使いRMSEで評価してみましょう。"],"metadata":{"id":"kgncnUg8aB-c"}},{"cell_type":"code","source":["preds = result3.predict(sm.add_constant(X_test[newb.index]))\n","\n","# sklearnは二乗平均誤差MSEしかないので、これを用いります。\n","from sklearn.metrics import mean_squared_error\n","rmse = np.sqrt(mean_squared_error(y_test, preds ))\n","print(rmse)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tz6SYSeHZ57B","executionInfo":{"status":"ok","timestamp":1716903384479,"user_tz":-540,"elapsed":569,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"a8baf6e5-5831-4ed9-d53b-b81c246d0590"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.38363049754500683\n"]}]},{"cell_type":"markdown","source":["この例では、Lassoにより変数選択を行った結果、わずかではありますが、モデルの性能が向上しました。\n","\n","もちろん、Lassoによる変数選択を行ってもモデルの性能は向上するとは限りません。\n","\n","1. 過学習が起こってない。この例だと、そもそも訓練データでの決定係数は0.558程度で、決して高くはありません。\n","\n","1. 説明変数が数が少ない。Lassoは基本変数が多いデータから、変数をある程度絞る時に用いることが多いです。少ない変数からさらに変数選択を行うと性能が悪化する可能性もあります。\n"],"metadata":{"id":"OBeB4XFyIX77"}},{"cell_type":"markdown","source":["★チャレンジ★　―　$\\alpha$のチューニング\n","\n","$\\alpha$の設定には正解が存在せず、分析目的や、残したい変数などにより様々な設定ができます。下記のコードでは、$\\alpha$と各偏回帰係数の関係性を可視化しています。"],"metadata":{"id":"Yv0w4J4CcFCN"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","\n","alphas = np.linspace(0.001, 0.5, 20) # 範囲 #等差数列start=0.001,end=0.5,num=20\n","bs = [] #\n","for alpha in alphas:\n","  norm = StandardScaler() # 標準化関数の定義\n","  normX = X_train.copy()\n","  normX[X_train.columns] = norm.fit_transform(X_train) # 標準化を行います。\n","  #display(normX)\n","\n","  import statsmodels.api as sm # モジュールの読み込み\n","\n","  # ここまでは同じ\n","  model = sm.OLS(y_train, sm.add_constant(normX)) # Y,　Xを入力\n","\n","  # ここでLasso\n","  result2 = model.fit_regularized(\n","                      method='elastic_net',\n","                      alpha=alpha,\n","                      L1_wt=1\n","                      )\n","  b= result2.params\n","  bs.append(b.to_numpy())\n"],"metadata":{"id":"g1KU685LZtRF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.plot(alphas,np.array(bs)) # alphaをX、偏回帰係数をY\n","plt.ylim(-0.5, 0.5)\n","plt.legend(b.index, bbox_to_anchor=(1, 1))\n","plt.xlabel('alpha',fontsize=15)\n","plt.ylabel('Coef', fontsize=15)\n","\n","plt.grid()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":480},"id":"AUG6IY6HaM4f","executionInfo":{"status":"ok","timestamp":1716903390920,"user_tz":-540,"elapsed":814,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"761330c6-0c2a-4ca9-f77e-7837c7a3ee19"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### <font color='crimson'>**[実践2]データ分析** (残り時間)</font>\n","\n","今回はデータの前処理からモデル訓練、モデル評価、および結果分析まで行ってみましょう。\n","\n","\n","\n","\n"],"metadata":{"id":"qP5GsVuHTaDe"}},{"cell_type":"markdown","source":["今回はこのマンションデータを使います。"],"metadata":{"id":"c8h-XasurMg1"}},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('https://raw.githubusercontent.com/dgod1028/Research/main/data/Mansion2.csv', encoding='cp932')\n","df.head()\n","display(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"Gb1sDwyZrNfn","executionInfo":{"status":"ok","timestamp":1717077371914,"user_tz":-540,"elapsed":3009,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"0a7a1c37-c3fb-4acb-f6f3-299a69261ed1"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["     徒歩 近さ     家賃   間取り    大きさ   方角  築年数\n","0     8  B   7900    1K  30.03   南     3\n","1     9  B   8500    1K  21.90   南     5\n","2    10  B  10800    1K  27.05   南     4\n","3    10  B  10800    1K  29.67   南     4\n","4    10  B  11000  1LDK  37.04   南    18\n","..   .. ..    ...   ...    ...  ...  ...\n","183   8  B  13100   1DK  41.81   西     5\n","184   8  B   8100    1K  20.50  北西     8\n","185  11  B   8600    1K  20.79  北東     0\n","186   8  B   7100    1K  22.00   西    17\n","187   9  B  18400  1LDK  54.68   西    10\n","\n","[188 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-a1273d97-831c-43eb-b342-cab7b864d3bc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>徒歩</th>\n","      <th>近さ</th>\n","      <th>家賃</th>\n","      <th>間取り</th>\n","      <th>大きさ</th>\n","      <th>方角</th>\n","      <th>築年数</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>8</td>\n","      <td>B</td>\n","      <td>7900</td>\n","      <td>1K</td>\n","      <td>30.03</td>\n","      <td>南</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>9</td>\n","      <td>B</td>\n","      <td>8500</td>\n","      <td>1K</td>\n","      <td>21.90</td>\n","      <td>南</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10</td>\n","      <td>B</td>\n","      <td>10800</td>\n","      <td>1K</td>\n","      <td>27.05</td>\n","      <td>南</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10</td>\n","      <td>B</td>\n","      <td>10800</td>\n","      <td>1K</td>\n","      <td>29.67</td>\n","      <td>南</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10</td>\n","      <td>B</td>\n","      <td>11000</td>\n","      <td>1LDK</td>\n","      <td>37.04</td>\n","      <td>南</td>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>183</th>\n","      <td>8</td>\n","      <td>B</td>\n","      <td>13100</td>\n","      <td>1DK</td>\n","      <td>41.81</td>\n","      <td>西</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>8</td>\n","      <td>B</td>\n","      <td>8100</td>\n","      <td>1K</td>\n","      <td>20.50</td>\n","      <td>北西</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>185</th>\n","      <td>11</td>\n","      <td>B</td>\n","      <td>8600</td>\n","      <td>1K</td>\n","      <td>20.79</td>\n","      <td>北東</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>186</th>\n","      <td>8</td>\n","      <td>B</td>\n","      <td>7100</td>\n","      <td>1K</td>\n","      <td>22.00</td>\n","      <td>西</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>187</th>\n","      <td>9</td>\n","      <td>B</td>\n","      <td>18400</td>\n","      <td>1LDK</td>\n","      <td>54.68</td>\n","      <td>西</td>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>188 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a1273d97-831c-43eb-b342-cab7b864d3bc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a1273d97-831c-43eb-b342-cab7b864d3bc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a1273d97-831c-43eb-b342-cab7b864d3bc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e03a5dc8-8dcd-49b3-bcaa-451436e8b5c4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e03a5dc8-8dcd-49b3-bcaa-451436e8b5c4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e03a5dc8-8dcd-49b3-bcaa-451436e8b5c4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 188,\n  \"fields\": [\n    {\n      \"column\": \"\\u5f92\\u6b69\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 15,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          3,\n          5,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u8fd1\\u3055\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"A\",\n          \"B\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5bb6\\u8cc3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2553,\n        \"min\": 6300,\n        \"max\": 18900,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          11500,\n          7700\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9593\\u53d6\\u308a\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"1LDK\",\n          \"1SK\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5927\\u304d\\u3055\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.8695080541575075,\n        \"min\": 17.0,\n        \"max\": 70.02,\n        \"num_unique_values\": 105,\n        \"samples\": [\n          21.37,\n          40.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"\\u5317 \",\n          \"\\u6771 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7bc9\\u5e74\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 0,\n        \"max\": 20,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          3,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["> `encoding='cp932'`について\n","\n","日本語を含むデータファイルは基本encodingが`utf-8`か`shift-jis`か`cp932`で保存されます。pandasだとデフォルトで`utf-8`で読み込みますが、もし違ったらいわゆる**文字化け**が起こり、ファイルが正しく読めなくなります。その際には、上記のように`encoding='cp932'`もしくはencoding='shift-jis'に指定することによりほとんどの日本語ファイルは問題なく読み込めることができます。"],"metadata":{"id":"e8HxrQusmKDV"}},{"cell_type":"markdown","source":["ここで、家賃を従属変数、それ以外を独立変数に指定して、回帰分析を行ってみてください。ただし、\n","\n","1. 家賃に対数を取って変換してください。\n","\n","1. データの80%を訓練データ、残りをテストデータとします。\n","\n","1. モデル評価はテストデータにおけるMAEで行ってください。\n","\n","1. 方角変数における南と北に有意な差が認められるかどうか分析してみてください。\n","\n","★チャレンジ★\n","\n","1. Lassoで変数選択を行い、テストデータを用いてモデルを評価してみてください。\n"],"metadata":{"id":"eu6zHmRpUY2h"}},{"cell_type":"code","source":["#解答\n","import numpy as np\n","#1\n","#対数変換\n","df['家賃'] = np.log(df['家賃'])\n","df.head()\n","\n","target = '家賃'\n","X = df.drop(target, axis=1)\n","y = df[target]\n","#2\n","#標準化\n","norm = StandardScaler() # 標準化関数の定義\n","X_normed = X.copy()\n","X_normed[['徒歩','築年数','大きさ']] = norm.fit_transform(X_normed[['徒歩','築年数','大きさ']]) # 標準化を行います。\n","#3\n","#ダミー処理, 方角は南をドロップする必要あり\n","X_normed2 = X_normed.copy() # バックアップ\n","X_normed2 = pd.get_dummies(X_normed2,columns=['近さ','間取り'], drop_first=True) #方角以外のダミー処理\n","X_normed2 = pd.get_dummies(X_normed2,columns=['方角']) # 方角\n","display(X_normed2)\n","X_normed2 = X_normed2.drop('方角_南 ',axis=1) # 南を捨てる\n","display(X_normed2)\n","#4\n","#訓練、テストデータ分割\n","from sklearn.model_selection import train_test_split\n","X_train, X_test ,y_train , y_test = train_test_split(X_normed2,y, test_size=0.2, random_state=0)\n","#5\n","#モデル訓練\n","import statsmodels.api as sm\n","model = sm.OLS(y_train, sm.add_constant(X_train.astype(float))) # Y,　Xを入力\n","result = model.fit()\n","result.summary()\n","#6\n","#モデル評価\n","from sklearn.metrics import mean_absolute_error\n","mean_absolute_error(y_test, result.predict(sm.add_constant(X_test.astype(float)) ))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":937},"id":"SLPg9RVkBRd9","executionInfo":{"status":"ok","timestamp":1717077448876,"user_tz":-540,"elapsed":1453,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"653b24f1-aa77-410d-aee0-d18eaca75f47"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["           徒歩       大きさ       築年数  近さ_B  間取り_1K  間取り_1LDK  間取り_1SK   方角_-  \\\n","0   -0.159949  0.436102 -0.940841  True    True     False    False  False   \n","1    0.177921 -0.599758 -0.582788  True    True     False    False  False   \n","2    0.515791  0.056414 -0.761815  True    True     False    False  False   \n","3    0.515791  0.390233 -0.761815  True    True     False    False  False   \n","4    0.515791  1.329260  1.744556  True   False      True    False  False   \n","..        ...       ...       ...   ...     ...       ...      ...    ...   \n","183 -0.159949  1.937016 -0.582788  True   False     False    False  False   \n","184 -0.159949 -0.778135 -0.045709  True    True     False    False  False   \n","185  0.853661 -0.741186 -1.477921  True    True     False    False  False   \n","186 -0.159949 -0.587017  1.565530  True    True     False    False  False   \n","187  0.177921  3.576809  0.312344  True   False      True    False  False   \n","\n","     方角_北   方角_北東   方角_北西   方角_南   方角_南東   方角_南西   方角_東   方角_西   \n","0    False   False   False   True   False   False  False  False  \n","1    False   False   False   True   False   False  False  False  \n","2    False   False   False   True   False   False  False  False  \n","3    False   False   False   True   False   False  False  False  \n","4    False   False   False   True   False   False  False  False  \n","..     ...     ...     ...    ...     ...     ...    ...    ...  \n","183  False   False   False  False   False   False  False   True  \n","184  False   False    True  False   False   False  False  False  \n","185  False    True   False  False   False   False  False  False  \n","186  False   False   False  False   False   False  False   True  \n","187  False   False   False  False   False   False  False   True  \n","\n","[188 rows x 16 columns]"],"text/html":["\n","  <div id=\"df-6ac3429c-cafc-445e-97cc-b4d5533d5a1d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>徒歩</th>\n","      <th>大きさ</th>\n","      <th>築年数</th>\n","      <th>近さ_B</th>\n","      <th>間取り_1K</th>\n","      <th>間取り_1LDK</th>\n","      <th>間取り_1SK</th>\n","      <th>方角_-</th>\n","      <th>方角_北</th>\n","      <th>方角_北東</th>\n","      <th>方角_北西</th>\n","      <th>方角_南</th>\n","      <th>方角_南東</th>\n","      <th>方角_南西</th>\n","      <th>方角_東</th>\n","      <th>方角_西</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.159949</td>\n","      <td>0.436102</td>\n","      <td>-0.940841</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.177921</td>\n","      <td>-0.599758</td>\n","      <td>-0.582788</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.515791</td>\n","      <td>0.056414</td>\n","      <td>-0.761815</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.515791</td>\n","      <td>0.390233</td>\n","      <td>-0.761815</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.515791</td>\n","      <td>1.329260</td>\n","      <td>1.744556</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>183</th>\n","      <td>-0.159949</td>\n","      <td>1.937016</td>\n","      <td>-0.582788</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>-0.159949</td>\n","      <td>-0.778135</td>\n","      <td>-0.045709</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>185</th>\n","      <td>0.853661</td>\n","      <td>-0.741186</td>\n","      <td>-1.477921</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>186</th>\n","      <td>-0.159949</td>\n","      <td>-0.587017</td>\n","      <td>1.565530</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>187</th>\n","      <td>0.177921</td>\n","      <td>3.576809</td>\n","      <td>0.312344</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>188 rows × 16 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ac3429c-cafc-445e-97cc-b4d5533d5a1d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6ac3429c-cafc-445e-97cc-b4d5533d5a1d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6ac3429c-cafc-445e-97cc-b4d5533d5a1d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-058dbc93-1f8d-4a63-a34c-df758c4918b2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-058dbc93-1f8d-4a63-a34c-df758c4918b2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-058dbc93-1f8d-4a63-a34c-df758c4918b2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_normed2","summary":"{\n  \"name\": \"X_normed2\",\n  \"rows\": 188,\n  \"fields\": [\n    {\n      \"column\": \"\\u5f92\\u6b69\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0026702317227172,\n        \"min\": -2.187169228737684,\n        \"max\": 2.2051410383411154,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          -1.8492992081931607,\n          -1.1735591671041146,\n          -0.1599491054705456\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5927\\u304d\\u3055\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0026702317227174,\n        \"min\": -1.2240774794775227,\n        \"max\": 5.531309937383039,\n        \"num_unique_values\": 105,\n        \"samples\": [\n          -0.6672867776351866,\n          1.7497199990122083,\n          1.6325009038875058\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7bc9\\u5e74\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0026702317227174,\n        \"min\": -1.4779209810417282,\n        \"max\": 2.1026092307603967,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          -0.9408414492714093,\n          -0.40376191750109064,\n          1.9235827201702904\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u8fd1\\u3055_B\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9593\\u53d6\\u308a_1K\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9593\\u53d6\\u308a_1LDK\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9593\\u53d6\\u308a_1SK\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_-\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5317 \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5317\\u6771 \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5317\\u897f \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5357 \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5357\\u6771 \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5357\\u897f \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u6771 \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u897f \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["           徒歩       大きさ       築年数  近さ_B  間取り_1K  間取り_1LDK  間取り_1SK   方角_-  \\\n","0   -0.159949  0.436102 -0.940841  True    True     False    False  False   \n","1    0.177921 -0.599758 -0.582788  True    True     False    False  False   \n","2    0.515791  0.056414 -0.761815  True    True     False    False  False   \n","3    0.515791  0.390233 -0.761815  True    True     False    False  False   \n","4    0.515791  1.329260  1.744556  True   False      True    False  False   \n","..        ...       ...       ...   ...     ...       ...      ...    ...   \n","183 -0.159949  1.937016 -0.582788  True   False     False    False  False   \n","184 -0.159949 -0.778135 -0.045709  True    True     False    False  False   \n","185  0.853661 -0.741186 -1.477921  True    True     False    False  False   \n","186 -0.159949 -0.587017  1.565530  True    True     False    False  False   \n","187  0.177921  3.576809  0.312344  True   False      True    False  False   \n","\n","     方角_北   方角_北東   方角_北西   方角_南東   方角_南西   方角_東   方角_西   \n","0    False   False   False   False   False  False  False  \n","1    False   False   False   False   False  False  False  \n","2    False   False   False   False   False  False  False  \n","3    False   False   False   False   False  False  False  \n","4    False   False   False   False   False  False  False  \n","..     ...     ...     ...     ...     ...    ...    ...  \n","183  False   False   False   False   False  False   True  \n","184  False   False    True   False   False  False  False  \n","185  False    True   False   False   False  False  False  \n","186  False   False   False   False   False  False   True  \n","187  False   False   False   False   False  False   True  \n","\n","[188 rows x 15 columns]"],"text/html":["\n","  <div id=\"df-d5a4e01f-6ba7-4d7e-bd97-614eded7fbdf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>徒歩</th>\n","      <th>大きさ</th>\n","      <th>築年数</th>\n","      <th>近さ_B</th>\n","      <th>間取り_1K</th>\n","      <th>間取り_1LDK</th>\n","      <th>間取り_1SK</th>\n","      <th>方角_-</th>\n","      <th>方角_北</th>\n","      <th>方角_北東</th>\n","      <th>方角_北西</th>\n","      <th>方角_南東</th>\n","      <th>方角_南西</th>\n","      <th>方角_東</th>\n","      <th>方角_西</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.159949</td>\n","      <td>0.436102</td>\n","      <td>-0.940841</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.177921</td>\n","      <td>-0.599758</td>\n","      <td>-0.582788</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.515791</td>\n","      <td>0.056414</td>\n","      <td>-0.761815</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.515791</td>\n","      <td>0.390233</td>\n","      <td>-0.761815</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.515791</td>\n","      <td>1.329260</td>\n","      <td>1.744556</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>183</th>\n","      <td>-0.159949</td>\n","      <td>1.937016</td>\n","      <td>-0.582788</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>-0.159949</td>\n","      <td>-0.778135</td>\n","      <td>-0.045709</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>185</th>\n","      <td>0.853661</td>\n","      <td>-0.741186</td>\n","      <td>-1.477921</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>186</th>\n","      <td>-0.159949</td>\n","      <td>-0.587017</td>\n","      <td>1.565530</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>187</th>\n","      <td>0.177921</td>\n","      <td>3.576809</td>\n","      <td>0.312344</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>188 rows × 15 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5a4e01f-6ba7-4d7e-bd97-614eded7fbdf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d5a4e01f-6ba7-4d7e-bd97-614eded7fbdf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d5a4e01f-6ba7-4d7e-bd97-614eded7fbdf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-018e9caa-41de-476f-9dbe-5ce37c0dc739\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-018e9caa-41de-476f-9dbe-5ce37c0dc739')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-018e9caa-41de-476f-9dbe-5ce37c0dc739 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_normed2","summary":"{\n  \"name\": \"X_normed2\",\n  \"rows\": 188,\n  \"fields\": [\n    {\n      \"column\": \"\\u5f92\\u6b69\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0026702317227172,\n        \"min\": -2.187169228737684,\n        \"max\": 2.2051410383411154,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          -1.8492992081931607,\n          -1.1735591671041146,\n          -0.1599491054705456\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5927\\u304d\\u3055\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0026702317227174,\n        \"min\": -1.2240774794775227,\n        \"max\": 5.531309937383039,\n        \"num_unique_values\": 105,\n        \"samples\": [\n          -0.6672867776351866,\n          1.7497199990122083,\n          1.6325009038875058\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7bc9\\u5e74\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0026702317227174,\n        \"min\": -1.4779209810417282,\n        \"max\": 2.1026092307603967,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          -0.9408414492714093,\n          -0.40376191750109064,\n          1.9235827201702904\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u8fd1\\u3055_B\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9593\\u53d6\\u308a_1K\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9593\\u53d6\\u308a_1LDK\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9593\\u53d6\\u308a_1SK\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_-\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5317 \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5317\\u6771 \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5317\\u897f \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5357\\u6771 \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u5357\\u897f \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u6771 \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u65b9\\u89d2_\\u897f \",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["0.0031984473842210284"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["#チャレンジ\n","from sklearn.preprocessing import StandardScaler\n","\n","# ここまでは同じ\n","model = sm.OLS(y_train, sm.add_constant(X_train.astype(float))) # Y,　Xを入力\n","\n","result2 = model.fit()\n","\n","#Lasso\n","result2 = model.fit_regularized (\n","                    method = 'elastic_net',\n","                    alpha = 0.01,\n","                    L1_wt =1\n","                    )\n","b = result2.params\n","display(b)\n","# 回帰係数が0ではない変数のみ選択\n","newb = b[b!=0].drop('const') # 切片項は捨てる\n","print(newb)\n","# その列名を取得\n","display(newb.index)\n","\n","#線形回帰　モデル評価\n","model = sm.OLS(y_train, sm.add_constant(X_train[newb.index].astype(float))) # Y,　Xを入力\n","\n","result = model.fit()\n","result.summary()\n","#モデル評価（RMSE）\n","# sklearnは二乗平均誤差MSEしかないので、これを用いります。\n","from sklearn.metrics import mean_absolute_error\n","mean_absolute_error(y_test, result.predict(sm.add_constant(X_test[newb.index].astype(float)) ))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":380},"id":"hEO2SApreYTG","executionInfo":{"status":"ok","timestamp":1717077539863,"user_tz":-540,"elapsed":341,"user":{"displayName":"鈴木由楽","userId":"12702162578142968440"}},"outputId":"2adff6cc-febf-4c5b-ff40-8cf39805f555"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["const       0.785206\n","徒歩          0.000000\n","大きさ         0.000000\n","築年数         0.000000\n","近さ_B        0.000000\n","間取り_1K      0.000000\n","間取り_1LDK    0.000000\n","間取り_1SK     0.000000\n","方角_-        0.000000\n","方角_北        0.000000\n","方角_北東       0.000000\n","方角_北西       0.000000\n","方角_南東       0.000000\n","方角_南西       0.000000\n","方角_東        0.000000\n","方角_西        0.000000\n","dtype: float64"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Series([], dtype: float64)\n"]},{"output_type":"display_data","data":{"text/plain":["Index([], dtype='object')"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["0.00974365857790104"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["\n"],"metadata":{"id":"JJ5pofgFecIn"},"execution_count":null,"outputs":[]}]}